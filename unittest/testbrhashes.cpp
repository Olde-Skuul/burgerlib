/***************************************

	Unit tests for the Integer Math library

	Copyright (c) 1995-2022 by Rebecca Ann Heineman <becky@burgerbecky.com>

	It is released under an MIT Open Source license. Please see LICENSE for
	license details. Yes, you can use it in a commercial title without paying
	anything, just give me a credit.

	Please? It's not like I'm asking you for money!

***************************************/

#include "testbrhashes.h"
#include "bradler16.h"
#include "bradler32.h"
#include "brcrc16.h"
#include "brcrc32.h"
#include "brfixedpoint.h"
#include "brgost.h"
#include "brguid.h"
#include "brmd2.h"
#include "brmd4.h"
#include "brmd5.h"
#include "brmemoryfunctions.h"
#include "brnumberstringhex.h"
#include "brsha1.h"
#include "common.h"

//
// Test Crc32B
// Codes generated at http://www.sha1-online.com/
//
// CRC 16 found here
// https://www.lammertbies.nl/comm/info/crc-calculation.html
//

struct HashTest_t {
	const char* m_pString;
	uint32_t m_Adler16;
	uint32_t m_Adler32;
	uint32_t m_CRC32;
	uint32_t m_CRC32B;
	Burger::MD2_t m_HashMD2;
	Burger::MD4_t m_HashMD4;
	Burger::MD5_t m_HashMD5;
	Burger::SHA1_t m_HashSHA1;
	Burger::GOST_t m_HashGOST;
	uint16_t m_CRC16IBM;
};

static const HashTest_t g_HashTestTable[] = {
	{"", 0x00000001, 0x00000001, 0x00000000, 0x00000000,
		{0x83, 0x50, 0xe5, 0xa3, 0xe2, 0x4c, 0x15, 0x3d, 0xf2, 0x27, 0x5c, 0x9f,
			0x80, 0x69, 0x27, 0x73},
		{0x31, 0xd6, 0xcf, 0xe0, 0xd1, 0x6a, 0xe9, 0x31, 0xb7, 0x3c, 0x59, 0xd7,
			0xe0, 0xc0, 0x89, 0xc0},
		{0xd4, 0x1d, 0x8c, 0xd9, 0x8f, 0x00, 0xb2, 0x04, 0xe9, 0x80, 0x09, 0x98,
			0xec, 0xf8, 0x42, 0x7e},
		{0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55, 0xbf, 0xef,
			0x95, 0x60, 0x18, 0x90, 0xaf, 0xd8, 0x07, 0x09},
		{0xce, 0x85, 0xb9, 0x9c, 0xc4, 0x67, 0x52, 0xff, 0xfe, 0xe3, 0x5c, 0xab,
			0x9a, 0x7b, 0x02, 0x78, 0xab, 0xb4, 0xc2, 0xd2, 0x05, 0x5c, 0xff,
			0x68, 0x5a, 0xf4, 0x91, 0x2c, 0x49, 0x49, 0x0f, 0x8d},
		0x0000},

	{"a", 0x00006262, 0x00620062, 0x6b9b9319, 0xe8b7be43,
		{0x32, 0xec, 0x01, 0xec, 0x4a, 0x6d, 0xac, 0x72, 0xc0, 0xab, 0x96, 0xfb,
			0x34, 0xc0, 0xb5, 0xd1},
		{0xbd, 0xe5, 0x2c, 0xb3, 0x1d, 0xe3, 0x3e, 0x46, 0x24, 0x5e, 0x05, 0xfb,
			0xdb, 0xd6, 0xfb, 0x24},
		{0x0c, 0xc1, 0x75, 0xb9, 0xc0, 0xf1, 0xb6, 0xa8, 0x31, 0xc3, 0x99, 0xe2,
			0x69, 0x77, 0x26, 0x61},
		{0x86, 0xf7, 0xe4, 0x37, 0xfa, 0xa5, 0xa7, 0xfc, 0xe1, 0x5d, 0x1d, 0xdc,
			0xb9, 0xea, 0xea, 0xea, 0x37, 0x76, 0x67, 0xb8},
		{0xd4, 0x2c, 0x53, 0x9e, 0x36, 0x7c, 0x66, 0xe9, 0xc8, 0x8a, 0x80, 0x1f,
			0x66, 0x49, 0x34, 0x9c, 0x21, 0x87, 0x1b, 0x43, 0x44, 0xc6, 0xa5,
			0x73, 0xf8, 0x49, 0xfd, 0xce, 0x62, 0xf3, 0x14, 0xdd},
		0xE8C1},

	{"message digest", 0x0000479F, 0x29750586, 0x5703c9bf, 0x20159d7f,
		{0xab, 0x4f, 0x49, 0x6b, 0xfb, 0x2a, 0x53, 0x0b, 0x21, 0x9f, 0xf3, 0x30,
			0x31, 0xfe, 0x06, 0xb0},
		{0xd9, 0x13, 0x0a, 0x81, 0x64, 0x54, 0x9f, 0xe8, 0x18, 0x87, 0x48, 0x06,
			0xe1, 0xc7, 0x01, 0x4b},
		{0xf9, 0x6b, 0x69, 0x7d, 0x7c, 0xb7, 0x93, 0x8d, 0x52, 0x5a, 0x2f, 0x31,
			0xaa, 0xf1, 0x61, 0xd0},
		{0xc1, 0x22, 0x52, 0xce, 0xda, 0x8b, 0xe8, 0x99, 0x4d, 0x5f, 0xa0, 0x29,
			0x0a, 0x47, 0x23, 0x1c, 0x1d, 0x16, 0xaa, 0xe3},
		{0xad, 0x44, 0x34, 0xec, 0xb1, 0x8f, 0x2c, 0x99, 0xb6, 0x0c, 0xbe, 0x59,
			0xec, 0x3d, 0x24, 0x69, 0x58, 0x2b, 0x65, 0x27, 0x3f, 0x48, 0xde,
			0x72, 0xdb, 0x2f, 0xde, 0x16, 0xa4, 0x88, 0x9a, 0x4d},
		0x3B44},

	{"abcdefghijklmnopqrstuvwxyz", 0x00006557, 0x90860b20, 0x9693bf77,
		0x4c2750bd,
		{0x4e, 0x8d, 0xdf, 0xf3, 0x65, 0x02, 0x92, 0xab, 0x5a, 0x41, 0x08, 0xc3,
			0xaa, 0x47, 0x94, 0x0b},
		{0xd7, 0x9e, 0x1c, 0x30, 0x8a, 0xa5, 0xbb, 0xcd, 0xee, 0xa8, 0xed, 0x63,
			0xdf, 0x41, 0x2d, 0xa9},
		{0xc3, 0xfc, 0xd3, 0xd7, 0x61, 0x92, 0xe4, 0x00, 0x7d, 0xfb, 0x49, 0x6c,
			0xca, 0x67, 0xe1, 0x3b},
		{0x32, 0xd1, 0x0c, 0x7b, 0x8c, 0xf9, 0x65, 0x70, 0xca, 0x04, 0xce, 0x37,
			0xf2, 0xa1, 0x9d, 0x84, 0x24, 0x0d, 0x3a, 0x89},
		{0x3b, 0x79, 0x17, 0x93, 0x75, 0x40, 0xa4, 0xf3, 0x3f, 0xfc, 0xb5, 0xf3,
			0x7f, 0x29, 0xe8, 0xa9, 0x92, 0x1b, 0x06, 0x55, 0xd7, 0xfd, 0x56,
			0x8d, 0x7c, 0xf2, 0x72, 0x91, 0xcb, 0x89, 0x7b, 0xb4},
		0x9C1D},

	{"0123456789ABCDEF", 0x00005CB2, 0x1ccb03a3, 0xef127626, 0x983c37b5,
		{0xc3, 0x1d, 0x79, 0x45, 0xaa, 0xfb, 0x1d, 0x69, 0x48, 0x20, 0xb7, 0x1a,
			0xa7, 0xea, 0xe7, 0x2b},
		{0x02, 0x4b, 0x50, 0x28, 0x7d, 0x63, 0xeb, 0x62, 0xdc, 0x29, 0xb4, 0x7c,
			0x6a, 0x9c, 0xe0, 0x03},
		{0xe4, 0x3d, 0xf9, 0xb5, 0xa4, 0x6b, 0x75, 0x5e, 0xa8, 0xf1, 0xb4, 0xdd,
			0x08, 0x26, 0x55, 0x44},
		{0xce, 0x27, 0xcb, 0x14, 0x10, 0x98, 0xfe, 0xb0, 0x07, 0x14, 0xe7, 0x58,
			0x64, 0x6b, 0xe3, 0xe9, 0x9c, 0x18, 0x5b, 0x71},
		{0xca, 0xe0, 0xe3, 0xa6, 0x42, 0x63, 0x4a, 0x92, 0xc9, 0x52, 0x71, 0xe5,
			0xee, 0x94, 0x9b, 0xc5, 0xde, 0x8f, 0x35, 0xf0, 0x2a, 0x1e, 0x1d,
			0xda, 0x7e, 0xdc, 0x81, 0x58, 0x98, 0xa9, 0xed, 0x9e},
		0x0F65},

	{"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
		0x0000B075, 0x8adb150c, 0x882174a0, 0x1fc2e6d2,
		{0xda, 0x33, 0xde, 0xf2, 0xa4, 0x2d, 0xf1, 0x39, 0x75, 0x35, 0x28, 0x46,
			0xc3, 0x03, 0x38, 0xcd},
		{0x04, 0x3f, 0x85, 0x82, 0xf2, 0x41, 0xdb, 0x35, 0x1c, 0xe6, 0x27, 0xe1,
			0x53, 0xe7, 0xf0, 0xe4},
		{0xd1, 0x74, 0xab, 0x98, 0xd2, 0x77, 0xd9, 0xf5, 0xa5, 0x61, 0x1c, 0x2c,
			0x9f, 0x41, 0x9d, 0x9f},
		{0x76, 0x1c, 0x45, 0x7b, 0xf7, 0x3b, 0x14, 0xd2, 0x7e, 0x9e, 0x92, 0x65,
			0xc4, 0x6f, 0x4b, 0x4d, 0xda, 0x11, 0xf9, 0x40},
		{0x95, 0xc1, 0xaf, 0x62, 0x7c, 0x35, 0x64, 0x96, 0xd8, 0x02, 0x74, 0x33,
			0x0b, 0x2c, 0xff, 0x6a, 0x10, 0xc6, 0x7b, 0x5f, 0x59, 0x70, 0x87,
			0x20, 0x2f, 0x94, 0xd0, 0x6d, 0x23, 0x38, 0xcf, 0x8e},
		0x57B4},

	{"12345678901234567890123456789012345678901234567890123456789012345678901234567890",
		0x0000CCB9, 0x97b61069, 0x96790816, 0x7ca94a72,
		{0xd5, 0x97, 0x6f, 0x79, 0xd8, 0x3d, 0x3a, 0x0d, 0xc9, 0x80, 0x6c, 0x3c,
			0x66, 0xf3, 0xef, 0xd8},
		{0xe3, 0x3b, 0x4d, 0xdc, 0x9c, 0x38, 0xf2, 0x19, 0x9c, 0x3e, 0x7b, 0x16,
			0x4f, 0xcc, 0x05, 0x36},
		{0x57, 0xed, 0xf4, 0xa2, 0x2b, 0xe3, 0xc9, 0x55, 0xac, 0x49, 0xda, 0x2e,
			0x21, 0x07, 0xb6, 0x7a},
		{0x50, 0xab, 0xf5, 0x70, 0x6a, 0x15, 0x09, 0x90, 0xa0, 0x8b, 0x2c, 0x5e,
			0xa4, 0x0f, 0xa0, 0xe5, 0x85, 0x55, 0x47, 0x32},
		{0xcc, 0x17, 0x8d, 0xca, 0xd4, 0xdf, 0x61, 0x9d, 0xca, 0xa0, 0x0a, 0xac,
			0x79, 0xca, 0x35, 0x5c, 0x00, 0x14, 0x4e, 0x4a, 0xda, 0x27, 0x93,
			0xd7, 0xbd, 0x9b, 0x35, 0x18, 0xea, 0xd3, 0xcc, 0xd3},
		0x5EC7},

	{"Let me eat your brain!", 0x000068D1, 0x57ab07ae, 0x88e5a24a, 0xc3fda0e7,
		{0x1d, 0x74, 0x13, 0x30, 0xeb, 0x8e, 0x10, 0xd5, 0x88, 0x7c, 0x58, 0x4c,
			0x85, 0xe1, 0x38, 0xd3},
		{0xc8, 0x5d, 0x0c, 0xa6, 0x62, 0xfa, 0xc6, 0x03, 0xb0, 0x72, 0x17, 0xa9,
			0xcf, 0x95, 0xb1, 0x09},
		{0x41, 0x79, 0xe1, 0x05, 0xc2, 0xda, 0x8a, 0xf8, 0xf6, 0x97, 0x30, 0x5d,
			0x55, 0xd1, 0xf4, 0x00},
		{0xba, 0x67, 0x08, 0x33, 0xd0, 0xc5, 0x5a, 0xaf, 0xb4, 0xc7, 0x9d, 0x09,
			0xec, 0xd3, 0x49, 0x72, 0x08, 0x54, 0x75, 0x02},
		{0x46, 0xcf, 0x15, 0xcf, 0xdc, 0x3b, 0xda, 0x9a, 0x77, 0x5f, 0x3b, 0x33,
			0xf1, 0xe2, 0x52, 0xa4, 0x68, 0xab, 0x74, 0x14, 0xd6, 0x30, 0xb7,
			0x13, 0xb1, 0x95, 0xa6, 0x3f, 0xff, 0x3c, 0x66, 0x02},
		0xE287},

	{"Calculate the cyclic redundancy checksum polynomial of 32-bit lengths of the string.",
		0x0000EA7C, 0x32b91ee1, 0x147e4e6c, 0xdc5c5e4b,
		{0x01, 0xf4, 0x4c, 0x08, 0xe0, 0xac, 0x58, 0x31, 0xaf, 0x8d, 0x1b, 0xec,
			0xba, 0x5d, 0xdd, 0x33},
		{0xd6, 0xd6, 0x3c, 0xe2, 0xed, 0x26, 0x07, 0x4a, 0x93, 0x82, 0x67, 0x17,
			0x55, 0x11, 0xe5, 0x63},
		{0x05, 0x5a, 0x19, 0x42, 0xf7, 0x80, 0x83, 0x5d, 0xfc, 0x36, 0x25, 0x98,
			0x41, 0x37, 0x2e, 0xb0},
		{0x8b, 0xbc, 0x3a, 0xca, 0xd5, 0xc7, 0x32, 0xc5, 0x81, 0xed, 0xc7, 0xda,
			0x0f, 0x89, 0x06, 0xd7, 0x4b, 0xf9, 0x79, 0x82},
		{0x14, 0x1d, 0x44, 0x14, 0xdd, 0x31, 0xdd, 0x2e, 0x4b, 0xf3, 0xad, 0x4a,
			0xdd, 0x64, 0x9a, 0xc8, 0x63, 0x8d, 0x4d, 0x80, 0xa7, 0xf1, 0x35,
			0x5f, 0x71, 0x47, 0x6a, 0xbe, 0x80, 0x79, 0xb5, 0x5c},
		0xE367},

	{"The quick brown fox jumps over the lazy dog", 0x0000B72A, 0x5bdc0fda,
		0x61ee9d45, 0x414fa339,
		{0x03, 0xd8, 0x5a, 0x0d, 0x62, 0x9d, 0x2c, 0x44, 0x2e, 0x98, 0x75, 0x25,
			0x31, 0x9f, 0xc4, 0x71},
		{0x1b, 0xee, 0x69, 0xa4, 0x6b, 0xa8, 0x11, 0x18, 0x5c, 0x19, 0x47, 0x62,
			0xab, 0xae, 0xae, 0x90},
		{0x9e, 0x10, 0x7d, 0x9d, 0x37, 0x2b, 0xb6, 0x82, 0x6b, 0xd8, 0x1d, 0x35,
			0x42, 0xa4, 0x19, 0xd6},
		{0x2f, 0xd4, 0xe1, 0xc6, 0x7a, 0x2d, 0x28, 0xfc, 0xed, 0x84, 0x9e, 0xe1,
			0xbb, 0x76, 0xe7, 0x39, 0x1b, 0x93, 0xeb, 0x12},
		{0x77, 0xb7, 0xfa, 0x41, 0x0c, 0x9a, 0xc5, 0x8a, 0x25, 0xf4, 0x9b, 0xca,
			0x7d, 0x04, 0x68, 0xc9, 0x29, 0x65, 0x29, 0x31, 0x5e, 0xac, 0xa7,
			0x6b, 0xd1, 0xa1, 0x0f, 0x37, 0x6d, 0x1f, 0x42, 0x94},
		0xFCDF}};

//
// Test calc_adler16()
//

static uint_t TestAdler16(void) BURGER_NOEXCEPT
{
	uint_t uFailure = FALSE;
	const HashTest_t* pWork = g_HashTestTable;
	uintptr_t uCount = BURGER_ARRAYSIZE(g_HashTestTable);
	do {
		const uint32_t uTester = Burger::calc_adler16(
			pWork->m_pString, Burger::string_length(pWork->m_pString));
		const uint_t uTest = (uTester != pWork->m_Adler16);
		uFailure |= uTest;
		if (uTest) {
			ReportFailure(
				"Burger::calc_adler16(\"%s\") = 0x%08X, expected 0x%08X", uTest,
				pWork->m_pString, uTester, pWork->m_Adler16);
		}
		++pWork;
	} while (--uCount);
	return uFailure;
}

//
// Test calc_adler32()
//

static uint_t TestAdler32(void) BURGER_NOEXCEPT
{
	uint_t uFailure = FALSE;
	const HashTest_t* pWork = g_HashTestTable;
	uintptr_t uCount = BURGER_ARRAYSIZE(g_HashTestTable);
	do {
		const uint32_t uTester = Burger::calc_adler32(
			pWork->m_pString, Burger::string_length(pWork->m_pString));
		const uint_t uTest = (uTester != pWork->m_Adler32);
		uFailure |= uTest;
		if (uTest) {
			ReportFailure(
				"Burger::calc_adler32(\"%s\") = 0x%08X, expected 0x%08X", uTest,
				pWork->m_pString, uTester, pWork->m_Adler32);
		}
		++pWork;
	} while (--uCount);
	return uFailure;
}

//
// Test calc_crc32b()
//

static uint_t TestCRC32B(void) BURGER_NOEXCEPT
{
	uint_t uFailure = FALSE;
	const HashTest_t* pWork = g_HashTestTable;
	uintptr_t uCount = BURGER_ARRAYSIZE(g_HashTestTable);
	do {
		const uint32_t uTester = Burger::calc_crc32b(
			pWork->m_pString, Burger::string_length(pWork->m_pString));
		const uint_t uTest = (uTester != pWork->m_CRC32B);
		uFailure |= uTest;
		if (uTest) {
			ReportFailure(
				"Burger::calc_crc32b(\"%s\") = 0x%08X, expected 0x%08X", uTest,
				pWork->m_pString, uTester, pWork->m_CRC32B);
		}
		++pWork;
	} while (--uCount);
	return uFailure;
}

//
// Test calc_crc32()
//

static uint_t TestCRC32(void) BURGER_NOEXCEPT
{
	uint_t uFailure = FALSE;
	const HashTest_t* pWork = g_HashTestTable;
	uintptr_t uCount = BURGER_ARRAYSIZE(g_HashTestTable);
	do {
		const uint32_t uTester = Burger::calc_crc32(
			pWork->m_pString, Burger::string_length(pWork->m_pString));
		const uint_t uTest = (uTester != pWork->m_CRC32);
		uFailure |= uTest;
		if (uTest) {
			ReportFailure(
				"Burger::calc_crc32(\"%s\") = 0x%08X, expected 0x%08X", uTest,
				pWork->m_pString, uTester, pWork->m_CRC32);
		}
		++pWork;
	} while (--uCount);
	return uFailure;
}

//
// Test calc_crc16IBM()
//

static uint_t TestCRC16IBM(void) BURGER_NOEXCEPT
{
	uint_t uFailure = FALSE;
	const HashTest_t* pWork = g_HashTestTable;
	uintptr_t uCount = BURGER_ARRAYSIZE(g_HashTestTable);
	do {
		const uint16_t uTester = Burger::calc_crc16IBM(
			pWork->m_pString, Burger::string_length(pWork->m_pString));
		const uint_t uTest = (uTester != pWork->m_CRC16IBM);
		uFailure |= uTest;
		if (uTest) {
			ReportFailure(
				"Burger::calc_crc16IBM(\"%s\") = 0x%04X, expected 0x%04X",
				uTest, pWork->m_pString, uTester, pWork->m_CRC16IBM);
		}
		++pWork;
	} while (--uCount);
	return uFailure;
}

//
// Test MD2
//

static uint_t TestMD2(void) BURGER_NOEXCEPT
{
	uint_t uFailure = FALSE;
	const HashTest_t* pWork = g_HashTestTable;
	uintptr_t uCount = BURGER_ARRAYSIZE(g_HashTestTable);
	do {
		Burger::MD2_t Tester;
		Burger::hash(
			&Tester, pWork->m_pString, Burger::string_length(pWork->m_pString));
		const uint_t uTest = static_cast<uint_t>(Burger::MemoryCompare(
			Tester.m_Hash, pWork->m_HashMD2.m_Hash, sizeof(Tester)));
		uFailure |= uTest;
		if (uTest) {
			ReportFailure(
				"Burger::hash(MD2_t,\"%s\") = 0x%02X%02X%02X%02X, expected 0x%02X%02X%02X%02X",
				uTest, pWork->m_pString, Tester.m_Hash[0], Tester.m_Hash[1],
				Tester.m_Hash[2], Tester.m_Hash[3], pWork->m_HashMD2.m_Hash[0],
				pWork->m_HashMD2.m_Hash[1], pWork->m_HashMD2.m_Hash[2],
				pWork->m_HashMD2.m_Hash[3]);
		}
		++pWork;
	} while (--uCount);
	return uFailure;
}

//
// Test MD4
//

static uint_t TestMD4(void) BURGER_NOEXCEPT
{
	uint_t uFailure = FALSE;
	const HashTest_t* pWork = g_HashTestTable;
	uintptr_t uCount = BURGER_ARRAYSIZE(g_HashTestTable);
	do {
		Burger::MD4_t Tester;
		Burger::hash(&Tester,
			reinterpret_cast<const uint8_t*>(pWork->m_pString),
			Burger::string_length(pWork->m_pString));
		const uint_t uTest = static_cast<uint_t>(Burger::MemoryCompare(
			Tester.m_Hash, pWork->m_HashMD4.m_Hash, sizeof(Tester)));
		uFailure |= uTest;
		if (uTest) {
			ReportFailure(
				"Burger::hash(MD4_t,\"%s\") = 0x%02X%02X%02X%02X, expected 0x%02X%02X%02X%02X",
				uTest, pWork->m_pString, Tester.m_Hash[0], Tester.m_Hash[1],
				Tester.m_Hash[2], Tester.m_Hash[3], pWork->m_HashMD4.m_Hash[0],
				pWork->m_HashMD4.m_Hash[1], pWork->m_HashMD4.m_Hash[2],
				pWork->m_HashMD4.m_Hash[3]);
		}
		++pWork;
	} while (--uCount);
	return uFailure;
}

//
// Test MD5
//

static uint_t TestMD5(void) BURGER_NOEXCEPT
{
	uint_t uFailure = FALSE;
	const HashTest_t* pWork = g_HashTestTable;
	uintptr_t uCount = BURGER_ARRAYSIZE(g_HashTestTable);
	do {
		Burger::MD5_t Tester;
		Burger::hash(&Tester,
			reinterpret_cast<const uint8_t*>(pWork->m_pString),
			Burger::string_length(pWork->m_pString));
		const uint_t uTest = static_cast<uint_t>(Burger::MemoryCompare(
			Tester.m_Hash, pWork->m_HashMD5.m_Hash, sizeof(Tester)));
		uFailure |= uTest;
		if (uTest) {
			ReportFailure(
				"Burger::hash(MD5_t,\"%s\") = 0x%02X%02X%02X%02X, expected 0x%02X%02X%02X%02X",
				uTest, pWork->m_pString, Tester.m_Hash[0], Tester.m_Hash[1],
				Tester.m_Hash[2], Tester.m_Hash[3], pWork->m_HashMD5.m_Hash[0],
				pWork->m_HashMD5.m_Hash[1], pWork->m_HashMD5.m_Hash[2],
				pWork->m_HashMD5.m_Hash[3]);
		}
		++pWork;
	} while (--uCount);
	return uFailure;
}

//
// Test SHA1
//

static uint_t TestSHA1(void) BURGER_NOEXCEPT
{
	uint_t uFailure = FALSE;
	const HashTest_t* pWork = g_HashTestTable;
	uintptr_t uCount = BURGER_ARRAYSIZE(g_HashTestTable);
	do {
		Burger::SHA1_t Tester;
		Burger::hash(&Tester,
			reinterpret_cast<const uint8_t*>(pWork->m_pString),
			Burger::string_length(pWork->m_pString));
		const uint_t uTest = static_cast<uint_t>(Burger::MemoryCompare(
			Tester.m_Hash, pWork->m_HashSHA1.m_Hash, sizeof(Tester)));
		uFailure |= uTest;
		if (uTest) {
			ReportFailure(
				"Burger::hash(SHA1_t,\"%s\") = 0x%02X%02X%02X%02X, expected 0x%02X%02X%02X%02X",
				uTest, pWork->m_pString, Tester.m_Hash[0], Tester.m_Hash[1],
				Tester.m_Hash[2], Tester.m_Hash[3], pWork->m_HashSHA1.m_Hash[0],
				pWork->m_HashSHA1.m_Hash[1], pWork->m_HashSHA1.m_Hash[2],
				pWork->m_HashSHA1.m_Hash[3]);
		}
		++pWork;
	} while (--uCount);
	return uFailure;
}

//
// Test GOST
//

static uint_t TestGOST(void) BURGER_NOEXCEPT
{
	uint_t uFailure = FALSE;
	const HashTest_t* pWork = g_HashTestTable;
	uintptr_t uCount = BURGER_ARRAYSIZE(g_HashTestTable);
	do {
		Burger::GOST_t Tester;
		Burger::hash(&Tester,
			reinterpret_cast<const uint8_t*>(pWork->m_pString),
			Burger::string_length(pWork->m_pString));
		const uint_t uTest = static_cast<uint_t>(Burger::MemoryCompare(
			Tester.m_Hash, pWork->m_HashGOST.m_Hash, sizeof(Tester)));
		uFailure |= uTest;
		if (uTest) {
			ReportFailure(
				"Burger::hash(GOST_t,\"%s\") = 0x%02X%02X%02X%02X, expected 0x%02X%02X%02X%02X",
				uTest, pWork->m_pString, Tester.m_Hash[0], Tester.m_Hash[1],
				Tester.m_Hash[2], Tester.m_Hash[3], pWork->m_HashGOST.m_Hash[0],
				pWork->m_HashGOST.m_Hash[1], pWork->m_HashGOST.m_Hash[2],
				pWork->m_HashGOST.m_Hash[3]);
		}
		++pWork;
	} while (--uCount);
	return uFailure;
}

//
// Test GUID functions
//

static const uint8_t g_FakeGUID1[16] = { // In proper endian
	0x33, 0x22, 0x11, 0x00, 0x55, 0x44, 0x77, 0x66, 0x88, 0x99, 0xAA, 0xBB,
	0xCC, 0xDD, 0xEE, 0xFF};

static const uint8_t g_FakeGUID2[16] = { // In proper endian
	0xAE, 0x4F, 0x1D, 0xF8, 0xEC, 0x7D, 0xD0, 0x11, 0xA7, 0x65, 0x00, 0xA0,
	0xC9, 0x1E, 0x6B, 0xF6};

struct GUID_Tests_t {
	const GUID* pGUID;
	const char* pGUIDStr;
};

static const GUID_Tests_t g_GUIDTests[] = {
	{reinterpret_cast<const GUID*>(g_FakeGUID1),
		"00112233-4455-6677-8899-AABBCCDDEEFF"},
	{reinterpret_cast<const GUID*>(g_FakeGUID2),
		"F81D4FAE-7DEC-11D0-A765-00A0C91E6BF6"}};

static uint_t TestGUID(void) BURGER_NOEXCEPT
{
	GUID Test;
	uint_t uFailure = FALSE;
	char TestStr[32];

	uintptr_t i = 0;
	const GUID_Tests_t* pTests = g_GUIDTests;
	do {
		// Convert the fake GUID to a string
		Burger::GUID_to_string(TestStr, pTests->pGUID);
		uint_t uTest = static_cast<uint_t>(
			Burger::StringCompare(TestStr, pTests->pGUIDStr));
		uFailure |= uTest;
		ReportFailure("Burger::GUID_to_string(%i) failure, found %s", uTest,
			static_cast<uint_t>(i), TestStr);

		// Convert the string to a GUID
		Burger::GUID_from_string(&Test, pTests->pGUIDStr);
		uTest =
			static_cast<uint_t>(!Burger::GUID_is_equal(&Test, pTests->pGUID));
		uFailure |= uTest;
		if (uTest) {
			Burger::GUID_to_string(TestStr, pTests->pGUID);
			ReportFailure("Burger::GUID_from_string(%i) failure, found %s",
				uTest, static_cast<uint_t>(i), TestStr);
		}
		++pTests;
	} while (++i < BURGER_ARRAYSIZE(g_GUIDTests));

	return uFailure;
}

//
// Test hash code
//

int BURGER_API TestBrhashes(uint_t uVerbose) BURGER_NOEXCEPT
{
	if (uVerbose & VERBOSE_MSG) {
		Message("Running Hashing tests");

		char buffer[40];
		GUID TempGUID;
		Burger::GUID_init(&TempGUID);
		Burger::GUID_to_string(buffer, &TempGUID);
		Message("New GUID = %s", buffer);
	}

	uint_t uResult = TestAdler16();
	uResult |= TestAdler32();
	uResult |= TestCRC32B();
	uResult |= TestCRC32();
	uResult |= TestCRC16IBM();
	uResult |= TestMD2();
	uResult |= TestMD4();
	uResult |= TestMD5();
	uResult |= TestSHA1();
	uResult |= TestGOST();
	uResult |= TestGUID();

	if (!uResult && (uVerbose & VERBOSE_MSG)) {
		Message("Passed all Hashing tests!");
	}
	return static_cast<int>(uResult);
}
