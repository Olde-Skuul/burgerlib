# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#

# pylint: disable=missing-module-docstring
# pylint: disable=invalid-name
# pylint: disable=redefined-builtin
# pylint: disable=consider-using-f-string

import subprocess
import os
import sys
import errno
import shutil
import sphinx_rtd_theme

from burger import import_py_script

# Determine if running on "ReadTheDocs.org"
_ON_RTD = os.environ.get("READTHEDOCS", None) == "True"
CWD = os.path.dirname(os.path.abspath(__file__))

# Add this folder to python so it can find the new file
sys.path.insert(0, CWD)

html_theme = "sphinx_rtd_theme"

# Add any paths that contain custom themes here, relative to this directory.
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# -- Project information -----------------------------------------------------

project = "Burgerlib"
copyright = "1995-2024, Rebecca Ann Heineman"
author = "Rebecca Ann Heineman"
breathe_projects = {
    project: "temp/xml/"
}

highlight_language = 'c++'

# The short X.Y version
version = "1.0"
# The full version, including alpha/beta/rc tags
release = "1.0.0"


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.mathjax",
    "breathe"
]

# Add any paths that contain templates here, relative to this directory.
templates_path = []

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = {
    ".rst": "restructuredtext"
    # ".md": "markdown"
}


# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []
# html_extra_path = ["temp/sphinx/html"]
html_extra_path = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = []

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "burgerlibdoc"


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, "burgerlib.tex", "Burgerlib Documentation",
     "Rebecca Ann Heineman", "manual"),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, "burgerlib", "Burgerlib Documentation",
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, "burgerlib", "Burgerlib Documentation",
     author, "burgerlib", "The only low level library you'll ever need",
     "Miscellaneous"),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ["search.html"]


# -- Extension configuration -------------------------------------------------

########################################

def locate_doxygen():
    """
    Return the location of doxygen

    If on ReadTheDocs, load in doxygen from logicware.com to
    get the latest version.

    Returns:
        String with the path to doxygen
    """

    # Read the docs has an old version of doxygen, upgrade it.
    if not _ON_RTD:
        return "doxygen"

    return "doxygen"

    # Put it at this folder
    doxygen = os.path.join(CWD, "doxygen")

    # Check if already present
    if not os.path.isfile(doxygen):

        # Load it from a remote site
        try:
            subprocess.call(
                ("curl --no-progress-meter -O "
                    "http://logicware.com/downloads/linux/doxygen-1.12.0.tgz"),
                cwd=CWD,
                shell=True)

            # Decompress it in this folder
            subprocess.call("tar -xvf doxygen-1.12.0.tgz", cwd=CWD,
                            shell=True)
        except OSError as error:
            sys.stderr.write("doxygen download error: %s" % error)

    # Return the full path
    return doxygen


########################################

def load_makeheader():
    """
    Download makeheader

    If on ReadTheDocs, load in makeheader from logicware.com to
    get the latest version.

    """

    # Readthedocs needs to load in makeheader
    if not _ON_RTD:
        return

    return
    # Put it at this folder
    makeheader = os.path.join(CWD, "makeheader")

    # Check if already present
    if not os.path.isfile(makeheader):

        # Load it from a remote site
        try:
            subprocess.call(
                ("curl --no-progress-meter -O "
                    "http://logicware.com/downloads/linux/makeheader.tgz"),
                cwd=CWD,
                shell=True)

            # Decompress it in this folder
            subprocess.call("tar -xvf makeheader.tgz", cwd=CWD,
                            shell=True)
        except OSError as error:
            sys.stderr.write("makeheader download error: %s" % error)


########################################


def generate_doxygen_xml(app):
    """
    Run the doxygen make commands if we're on the ReadTheDocs server
    """

    # pylint: disable=unused-argument

    # Doxygen can't create a nested folder. Help it by
    # creating the first folder

    try:
        os.makedirs(os.path.join(CWD, "temp"))
    except OSError as error:
        if error.errno != errno.EEXIST:
            raise

    # If on Readthe docs, abort if already run
    # Test if the index.htm file exists
    if _ON_RTD and os.path.isfile(
            os.path.join(CWD, "temp", "burgerlibdoxygenraw", "index.htm")):
        return None

    # The tools need makeheader, make sure it's present
    load_makeheader()

    # Invoke the prebuild python script to create the super headers
    # that are needed by doxygen
    build_rules = import_py_script(
        os.path.join(CWD, "build_rules.py"))
    build_rules.prebuild(CWD, "all")

    # Read the docs has an old version of doxygen, upgrade it.
    doxygen = locate_doxygen()

    # Call Doxygen to build the documentation
    try:
        # Log the Doxygen version number
        subprocess.call(doxygen + " -v", cwd=CWD, shell=True)
        retcode = subprocess.call(doxygen, cwd=CWD, shell=True)
        if retcode < 0:
            sys.stderr.write("doxygen terminated by signal %s" % (-retcode))

        else:
            # Generate PDF docs on Read The Docs
            build_rules.postbuild(CWD, "all")

    except OSError as error:
        sys.stderr.write("doxygen execution failed: %s" % error)

    return None

########################################


def copy_docs(app, exception):
    """
    Sphinx is done, copy the docs

    Replace the Sphinx docs with the Doxygen docs
    """

    # pylint: disable=unused-argument

    # If on ReadTheDocs.org, copy doxygen to public folder
    if _ON_RTD:

        # Find the destination folder
        output_dir = os.environ.get(
            "READTHEDOCS_OUTPUT", ".")
        output_dir = os.path.join(output_dir, "html")

        try:
            retcode = subprocess.call(
                "cp -r . " + output_dir,
                cwd=os.path.join(CWD, "temp", "burgerlibdoxygenraw"),
                shell=True)
            if retcode < 0:
                sys.stderr.write("cp terminated by signal %s" % (-retcode))
        except OSError as error:
            sys.stderr.write("cp execution failed: %s" % error)

        # Copy over the Sphinx index with the Doxygen file
        src_file = os.path.join(output_dir, "index.htm")
        dest_file = os.path.join(output_dir, "index.html")
        shutil.copy(src_file, dest_file)

########################################


def setup(app):
    """
    Called by breathe to create the doxygen docs
    """

    # Add hook for building doxygen xml when needed
    app.connect("builder-inited", generate_doxygen_xml)

    # Add hook for building doxygen xml when needed
    app.connect("build-finished", copy_docs)
