;
; X86 assembly for Visual Studio
;
; Copyright 1995-2023 by Rebecca Ann Heineman becky@burgerbecky.com
;
; Build with ml.exe
;
; void BURGER_API Burger::float_to_int_ceil(int32_t* pOutput, float fInput)
; eax, ecx and edx are volatile
; pOutput = ecx
; fInput = [esp+4]
;

	.686
	.MODEL FLAT

_TEXT segment para 'CODE'

	align 16
public ?float_to_int_ceil@Burger@@YIXPAHM@Z
?float_to_int_ceil@Burger@@YIXPAHM@Z proc

; Get the input value
	fld		dword ptr[esp + 4]

; Load the same value in the FPU
	fld		st(0)

; Convert the float to integer
	frndint

; Store the integer (Leave a copy in the FPU)
	fist	dword ptr[esp + 4]

; Compare the integer to the input and pop
	fcomip	st(0), st(1)

; Clean up the FP stack
	fstp	st(0)

; Get the integer
	mov		eax, dword ptr[esp + 4]

; Need to update the rounding?
	jae		NoExtra

; ++1
	inc		eax
NoExtra:

; Store in the pointer
	mov		dword ptr[ecx], eax
	ret		4

?float_to_int_ceil@Burger@@YIXPAHM@Z endp

_TEXT ends

	end
