;
; X86 assembly for Visual Studio
;
; Copyright 1995-2023 by Rebecca Ann Heineman becky@burgerbecky.com
;
; Build with ml.exe
;
; double BURGER_API Burger::get_round(double dInput)
; eax, ecx and edx are volatile
; dInput = [esp+4]
; Result in 8087 FPU
;

	.686
	.MODEL FLAT

	.data

; Actually Burger::g_X86RoundDownFlag
	EXTRN	?g_X86RoundDownFlag@Burger@@3GB:WORD
	EXTRN	?g_X86OneAndNegOne@Burger@@3QBTuint32_float_t@1@B:DWORD

_TEXT segment para 'CODE'

	align 16
public ?get_round@Burger@@YINN@Z
?get_round@Burger@@YINN@Z proc

; Get the sign bit
	mov		eax, dword ptr[esp + 8]

; Load into the FPU
	fld		qword ptr[esp + 4]

; 1 for negative, 0 for positive
	shr		eax, 31

; Save state
	fstcw	[esp + 4]

; Set round down
	fldcw	word ptr[?g_X86RoundDownFlag@Burger@@3GB]

; Add or subtract 0.5f
	fadd	dword ptr[?g_X86OneAndNegOne@Burger@@3QBTuint32_float_t@1@B + eax * 4]

; Round
	frndint

; Restore rounding
	fldcw	[esp + 4]
	ret		8

?get_round@Burger@@YINN@Z endp

_TEXT ends

	end
