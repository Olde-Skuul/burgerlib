;
; X86 assembly for Visual Studio
;
; Copyright 1995-2023 by Rebecca Ann Heineman becky@burgerbecky.com
;
; Build with ml.exe
;
; double BURGER_API Burger::modulo_radians(double dInput)
; eax, ecx and edx are volatile
; dInput = [esp+4]
; Result in 8087 FPU
;

	.686
	.MODEL FLAT

	.data

	EXTRN	?g_dReciprocalPi2@Burger@@3Tuint64_double_t@1@B:QWORD
	EXTRN	?g_dHalf@Burger@@3Tuint64_double_t@1@B:QWORD
	EXTRN	?g_dOne@Burger@@3Tuint64_double_t@1@B:QWORD
	EXTRN	?g_dPi2@Burger@@3Tuint64_double_t@1@B:QWORD

_TEXT segment para 'CODE'

	align 16
public ?modulo_radians@Burger@@YINN@Z
?modulo_radians@Burger@@YINN@Z proc

; Load into the FPU
	fld		qword ptr[esp + 4]

; Load in 1/2Pi
	fld		qword ptr[?g_dReciprocalPi2@Burger@@3Tuint64_double_t@1@B]

; Multiply
	fmul	st(0), st(1)

; Add half for rounding
	fadd	qword ptr[?g_dHalf@Burger@@3Tuint64_double_t@1@B]

; Store at double precision
	fst		qword ptr[esp + 4]

; Remove fraction
	frndint

; Compare the two and get rid of the pre-rounded
	fcom	qword ptr[esp + 4]
	fnstsw	ax
	test	ah, 041H

; Did it round up?
	jnz		ModuloRadiansFExit

; Fixup
	fsub	qword ptr[?g_dOne@Burger@@3Tuint64_double_t@1@B]
ModuloRadiansFExit:

; Mul by 2 pi
	fmul	qword ptr[?g_dPi2@Burger@@3Tuint64_double_t@1@B]

; Subtract and clean up
	fsubp	st(1), st(0)
	ret		8

?modulo_radians@Burger@@YINN@Z endp

_TEXT ends

	end
