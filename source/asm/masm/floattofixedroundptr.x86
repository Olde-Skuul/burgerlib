;
; X86 assembly for Visual Studio
;
; Copyright 1995-2023 by Rebecca Ann Heineman becky@burgerbecky.com
;
; Build with ml.exe
;
; void BURGER_API Burger::float_to_fixed_round(Fixed32* pOutput, float fInput)
; eax, ecx and edx are volatile
; pOutput = ecx
; fInput = [esp+4]
;

	.686
	.MODEL FLAT

	.data

; Actually Burger::g_u8087RoundToZero
	EXTRN	?g_u8087RoundToZero@Burger@@3GB:WORD
	EXTRN	?g_X86HalfAndNegHalf@Burger@@3QBTuint32_float_t@1@B:DWORD
	EXTRN	?g_f65536@Burger@@3Tuint32_float_t@1@B:DWORD

_TEXT segment para 'CODE'

	align 16
public ?float_to_fixed_round@Burger@@YIXPAHM@Z
?float_to_fixed_round@Burger@@YIXPAHM@Z proc

; Get the sign bit
	mov		eax, dword ptr[esp + 4]

; Load into the FPU
	fld		dword ptr[esp + 4]

; Convert to fixed point
	fmul	[?g_f65536@Burger@@3Tuint32_float_t@1@B]

; 1 for negative, 0 for positive
	shr		eax, 31

; Save state
	fstcw	[esp + 4]

; Set round down
	fldcw 	[?g_u8087RoundToZero@Burger@@3GB]

; Add or subtract 0.5f
	fadd	[?g_X86HalfAndNegHalf@Burger@@3QBTuint32_float_t@1@B + eax * 4]

; Round
	frndint

; Restore rounding
	fldcw	[esp + 4]

; Store in pOutput[0]
	fistp	dword ptr[ecx]
	ret		4

?float_to_fixed_round@Burger@@YIXPAHM@Z endp

_TEXT ends

	end
