;
; X86 assembly for Open Watcom
;
; Copyright 1995-2025 by Rebecca Ann Heineman becky@burgerbecky.com
;
; Build with wasm.exe
;
; uint64_t Burger::power_of_two(uint64_t uInput)
; all registers are non-volatile
; Result in edx, eax
; uInput = edx, eax
;

	.386

_TEXT segment para 'CODE'

	align 16
	PUBLIC `W?power_of_two$:Burger$n(uz)uz`
`W?power_of_two$:Burger$n(uz)uz` proc

; Save registers
	push	ecx

; Force 0x40000000 to be 0x3FFFFFFF so in the end
; it's changed back to 0x40000000 (64 bit)

	sub		eax, 1
	sbb		edx, 0

; Check if the upper bits are clear
	bsr		edx, edx
	jz		low32

; Shift has to use ecx
	mov		ecx, edx

; Prepare for shift
	mov		edx, 1

; edx has the power of 2, but it needs one more left shift
	shl		edx, cl

; Do the final shift, if overflow, return zero
	add		edx, edx

; Low 32 bits are always clear
	xor		eax, eax
	pop		ecx
	ret

; Input value resolves to low 32 bits.
; Answer is 0x1 to 0x100000000
low32:
; Shift value has to be in ecx
	mov		ecx, eax

; Prepare for shift
	mov		eax, 1

; Clear high word
	xor		edx, edx

; Find the LEFTMOST bit, ecx will have 0x00 to 0x1F
	bsr		ecx, ecx

; Smallest number
	jz		one

; eax has the power of 2, but it needs one more left shift
	shl		eax, cl

; Do the final shift, if overflow, set edx to 1
	add		eax, eax
	adc		edx, 0
one:
	pop		ecx
	ret

`W?power_of_two$:Burger$n(uz)uz` endp

_TEXT ends

	end
