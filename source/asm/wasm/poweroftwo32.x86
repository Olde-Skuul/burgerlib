;
; X86 assembly for Open Watcom
;
; Copyright 1995-2025 by Rebecca Ann Heineman becky@burgerbecky.com
;
; Build with wasm.exe
;
; uint32_t Burger::power_of_two(uint32_t uInput)
; all registers are non-volatile
; Result in eax
; uInput = eax
;

	.386

_TEXT segment para 'CODE'

	align 16
	PUBLIC `W?power_of_two$:Burger$n(ui)ui`
`W?power_of_two$:Burger$n(ui)ui` proc

; Save registers
	push	ecx
	push	edx

; Force 0x40000000 to be 0x3FFFFFFF so in the end
; it's changed back to 0x40000000
	lea		ecx, [eax - 1] 

; Clear eax for the setnz
	xor		eax, eax

; Find the LEFTMOST bit, ecx will have 0x00 to 0x1F
	bsr		ecx, ecx

; If ecx == 0, clear eax, otherwise set it to 1
	setnz	al

; edx = 0 or 1
	mov		edx, eax

; eax has the power of 2, but it needs one more left shift
	shl		eax, cl

; edx is 1 only on the uinput==1 case, otherwise it's zero
	xor		edx, 1

; For the final result, eax has the power of two but it
; needs one more shift, so eax * 2 performs that. However
; in the 1 input case, eax is zero.
; edx has 0 in all cases but uInput == 1, where it will
; have 1. So...
; uInput was 1 (1-1) -> 0, so, 0^1 = 1+0 = 1
	lea		eax, [edx + eax * 2]

; Restore registers
	pop		edx
	pop		ecx
	ret

`W?power_of_two$:Burger$n(ui)ui` endp

_TEXT ends

	end
