;
; X86 assembly for Open Watcom
;
; Copyright 1995-2023 by Rebecca Ann Heineman becky@burgerbecky.com
;
; Build with wasm.exe
;
; double BURGER_API Burger::get_round(double dInput) BURGER_NOEXCEPT
; all registers are non-volatile
; Result in 8087 FPU
; dInput = [esp+4]
;

	.686
	.MODEL FLAT,SYSCALL

	.data

; Actually Burger::g_u8087RoundToZero
	EXTRN	`W?g_u8087RoundToZero$:Burger$nxus`:WORD
	EXTRN	`W?g_X86HalfAndNegHalf$:Burger$n[]x$uint32_float_t$:1$`:DWORD

_TEXT segment para 'CODE'

	align 16
public `W?get_round$:Burger$n(d)d`
`W?get_round$:Burger$n(d)d` proc

	push	eax
; Get the sign bit
	mov		eax, dword ptr[esp + 12]

; Load into the FPU
	fld		qword ptr[esp + 8]

; 1 for negative, 0 for positive
	shr		eax, 31

; Save state
	fstcw	[esp + 8]

; Set round down
	fldcw	[`W?g_u8087RoundToZero$:Burger$nxus`]

; Add or subtract 0.5f
	fadd	[`W?g_X86HalfAndNegHalf$:Burger$n[]x$uint32_float_t$:1$` + eax * 4]

; Round
	frndint

; Restore rounding
	fldcw	[esp + 8]
	pop		eax
	ret		8

`W?get_round$:Burger$n(d)d` endp

_TEXT	ends

	end
