;
; X86 assembly for Open Watcom
;
; Copyright 1995-2023 by Rebecca Ann Heineman becky@burgerbecky.com
;
; Build with wasm.exe
;
; double BURGER_API Burger::modulo_radians(double dInput) BURGER_NOEXCEPT
; all registers are non-volatile
; Result in 8087 FPU
; dInput = [esp+4]
;

	.686
	.MODEL FLAT,SYSCALL

	.data

; Actually Burger::g_X86RoundDownFlag
	EXTRN	`W?g_dReciprocalPi2$:Burger$nx$uint64_double_t$:1$`:QWORD
	EXTRN	`W?g_dHalf$:Burger$nx$uint64_double_t$:1$`:QWORD
	EXTRN	`W?g_dOne$:Burger$nx$uint64_double_t$:1$`:QWORD
	EXTRN	`W?g_dPi2$:Burger$nx$uint64_double_t$:1$`:QWORD


_TEXT segment para 'CODE'

	align 16
public `W?modulo_radians$:Burger$n(d)d`
`W?modulo_radians$:Burger$n(d)d` proc

; Watcom needs eax untouched
	push	eax

; Load into the FPU
	fld		qword ptr[esp + 8]

; Load in 1/2Pi
	fld		qword ptr[`W?g_dReciprocalPi2$:Burger$nx$uint64_double_t$:1$`]

; Multiply
	fmul	st(0), st(1)

; Add half for rounding
	fadd	qword ptr[`W?g_dHalf$:Burger$nx$uint64_double_t$:1$`]

; Store at double precision
	fst		qword ptr[esp + 8]

; Remove fraction
	frndint

; Compare the two and get rid of the pre-rounded
	fcom	qword ptr[esp + 8]
	fnstsw	ax
	test	ah, 0x41

; Did it round up?
	jnz		ModuloRadiansFExit

; Fixup
	fsub	qword ptr[`W?g_dOne$:Burger$nx$uint64_double_t$:1$`]
ModuloRadiansFExit:

; Mul by 2 pi
	fmul	qword ptr[`W?g_dPi2$:Burger$nx$uint64_double_t$:1$`]

; Subtract and clean up
	fsubp	st(1), st(0)
	pop		eax
	ret		8

`W?modulo_radians$:Burger$n(d)d` endp

_TEXT	ends

	end
