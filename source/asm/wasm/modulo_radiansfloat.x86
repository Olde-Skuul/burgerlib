;
; X86 assembly for Open Watcom
;
; Copyright 1995-2023 by Rebecca Ann Heineman becky@burgerbecky.com
;
; Build with wasm.exe
;
; float BURGER_API Burger::modulo_radians(float fInput) BURGER_NOEXCEPT
; all registers are non-volatile
; Result in 8087 FPU
; fInput = [esp+4]
;

	.686
	.MODEL FLAT,SYSCALL

	.data

; Actually Burger::g_X86RoundDownFlag
	EXTRN	`W?g_fReciprocalPi2$:Burger$nx$uint32_float_t$:1$`:DWORD
	EXTRN	`W?g_fHalf$:Burger$nx$uint32_float_t$:1$`:DWORD
	EXTRN	`W?g_fOne$:Burger$nx$uint32_float_t$:1$`:DWORD
	EXTRN	`W?g_fPi2$:Burger$nx$uint32_float_t$:1$`:DWORD

_TEXT segment para 'CODE'

	align 16
public `W?modulo_radians$:Burger$n(b)b`
`W?modulo_radians$:Burger$n(b)b` proc

; Watcom needs eax untouched
	push	eax

; Load into the FPU
	fld		dword ptr[esp + 8]

; Load in 1/ 2Pi
	fld		dword ptr[`W?g_fReciprocalPi2$:Burger$nx$uint32_float_t$:1$`]

; Multiply (Really fInput/2Pi)
	fmul	st(0), st(1)

; Add half for rounding
	fadd	dword ptr[`W?g_fHalf$:Burger$nx$uint32_float_t$:1$`]

; Round to nearest in 24 bit to force consistent precision
	fst		dword ptr[esp + 8]

; Convert to integer
	frndint

; Compare the two and get rid of the pre-rounded
	fcom	dword ptr[esp + 8]
	fnstsw 	ax

; Branch if less or equal
	test	ah, 0x41

; Did it round up?
	jne		ModuloRadiansFExit

; Fixup
	fsub	dword ptr[`W?g_fOne$:Burger$nx$uint32_float_t$:1$`]
ModuloRadiansFExit:

; Mul by 2 pi
	fmul	dword ptr[`W?g_fPi2$:Burger$nx$uint32_float_t$:1$`]

; Subtract and clean up
	fsubp	st(1), st(0)

; Restore eax
	pop		eax
	ret		4

`W?modulo_radians$:Burger$n(b)b` endp

_TEXT	ends

	end
