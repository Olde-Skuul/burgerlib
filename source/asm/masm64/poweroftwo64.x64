;
; X64 assembly for Visual Studio
;
; Copyright 1995-2025 by Rebecca Ann Heineman becky@burgerbecky.com
;
; Build with ml64.exe
;
; uint64_t Burger::power_of_two(uint64_t uInput)
; rax, rcx, rdx, r8-11 are volatile
; uInput = rcx
; Result in rax
;

_TEXT segment para 'CODE'

	align 16
public ?power_of_two@Burger@@YA_K_K@Z
?power_of_two@Burger@@YA_K_K@Z proc

; Force 0x40000000 to be 0x3FFFFFFF so in the end
; it is changed back to 0x40000000
	dec		rcx

; Clear rax for the setnz
	xor		rax, rax

; Find the LEFTMOST bit, ecx will have 0x00 to 0x1F
	bsr		rcx, rcx

; If ecx == 0, clear eax, otherwise set it to 1
	setnz	al

; edx = 0 or 1
	mov		rdx, rax

; eax has the power of 2, but it needs one more left shift
	shl		rax, cl

; edx is 1 only on the uinput==1 case, otherwise it is zero
	xor		rdx, 1

; For the final result, eax has the power of two but it
; needs one more shift, so eax * 2 performs that. However
; in the 1 input case, eax is zero.
; edx has 0 in all cases but uInput == 1, where it will
; have 1. So...
; uInput was 1 (1-1) -> 0, so, 0^1 = 1+0 = 1
	lea		rax, [rdx + rax * 2]

; Exit
	ret

?power_of_two@Burger@@YA_K_K@Z endp

_TEXT ends

	end
