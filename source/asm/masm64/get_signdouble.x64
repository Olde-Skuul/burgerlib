;
; X64 assembly for Visual Studio
;
; Copyright 1995-2023 by Rebecca Ann Heineman becky@burgerbecky.com
;
; Build with ml64.exe
;
; double Burger::get_sign(double dInput)
; rax, rcx, rdx, r8-11 are volatile
; dInput = xmm0
; Result in xmm0
;

;	extrn ?g_dOne@Burger@@3Tuint64_double_t@1@B:qword

_TEXT segment para 'CODE'

	align 16
public ?get_sign@Burger@@YANN@Z
?get_sign@Burger@@YANN@Z proc

; Move to an integer register
	movd	rax, xmm0

; Load 1.0, shifted up by one bit
	mov		rcx, 07FE0000000000000H

; Obtain the sign bit in carry
	shl		rax, 1

; Convert 1.0 to 1.0 or -1.0 depending on sign
	rcr		rcx, 1

; Set carry if not zero
	neg		rax

; EAX is mask, zero or 0xFFFFFFFF
	sbb		rax, rax

; Mask 1.0/-1.0f to zero if zero
	and		rcx, rax

; Move result to float
	movd	xmm0, rcx

; Exit
	ret

;
; The code below used SSE only and was not as fast as the code above
; Keeping it as a reference in case ideas are needed
;

; Copy to generate the sign mask
;	movapd	xmm2, xmm0

; Need a zero for a comparison
;	xorps	xmm3, xmm3

; Load 1.0f from Burgerlib constants
;	movsd	xmm1, qword ptr [?g_dOne@Burger@@3Tuint64_double_t@1@B]

; Chop off the sign from the input for 0.0f and -0.0f test
;	psllq	xmm0, 1

; Get rid of all bit but the sign
;	psrlq	xmm2, 63

; Convert to 0xFFFFFFFF if zero, 0 if not
;	pcmpeqq	xmm0, xmm3

; Move the sign back to the highest bit
;	psllq	xmm2, 63

; Or in the sign to 1.0/-1.0f
;	por		xmm1, xmm2

; Mask with 1.0f/-1.0f
;	pandn	xmm0, xmm1
;	ret

?get_sign@Burger@@YANN@Z endp

_TEXT ends

	end
