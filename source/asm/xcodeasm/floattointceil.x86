/***************************************

	Assembly for MacOSX Darwin

	Copyright 1995-2023 by Rebecca Ann Heineman becky@burgerbecky.com

	Build with XCode tool chain

	XCode uses a C++ parser and will try to assemble this file on all
	CPU types, so test for the proper CPU type before invoking any cpu
	instructions.

	int32_t BURGER_API Burger::float_to_int_ceil(float fInput) BURGER_NOEXCEPT

***************************************/

/***************************************

	PowerPC 32 version
	
	r0, r3-12, fp0-fp13 are volatile
	Result in r3
	fInput = fp1

***************************************/

#if defined(__ppc__)
	.align 2
	.text

	.globl __ZN6Burger17float_to_int_ceilEf
__ZN6Burger17float_to_int_ceilEf:

; Get the address of g_fMinNoInteger
	lis		r3, ha16(__ZN6Burger15g_fMinNoIntegerE)

; Save the rounding register
	mffs	f4
	
; Load 8388608.0f
	lfs		f2, lo16(__ZN6Burger15g_fMinNoIntegerE)(r3)
	
; Set bits 30 and 31 to Round toward +infinity
	mtfsfi	7, 0x02

; Push the positive number to highest value without fraction
	fadds	f3, f1, f2

; Push the negative number to the lowest value without fraction
	fsubs	f0, f1, f2

; Undo the push (Fraction is gone)
	fsubs	f3, f3, f2
	
; Undo the push (Fraction is gone)
	fadds	f0, f0, f2

; Which one to use? Positive or negative?
	fsel	f1, f1, f3, f0

; Restore rounding
	mtfsf	255, f4

; Convert to integer
	fctiwz	f1, f1

; Pointer to temp on the stack
	subi	r3, r1, 8
	
; Store the integer
	stfiwx	f1, 0, r3

; Return the integer
	lwz		r3, 0(r3)
	blr

#endif

/***************************************

	PowerPC 64 version
	
	r0, r3-12, fp0-fp13 are volatile
	Result in r3
	fInput = fp1

***************************************/

#if defined(__ppc64__)
	.align 2
	.text

	.globl __ZN6Burger17float_to_int_ceilEf
__ZN6Burger17float_to_int_ceilEf:

/* Convert the input into an integer */
	fctidz	f2, f1

/* Load 1.0 */
	lis		r2, ha16(__ZN6Burger6g_fOneE)

/* Convert back to a double */
	fcfid	f2, f2

/* f0 = 1.0 */
	lfs		f0,	lo16(__ZN6Burger6g_fOneE)(r2)

/* Pointer to temp */
	subi	r4, r1, 8

/* Check if there was a fraction */
	fsub	f1, f2, f1

/* Round up by 1.0 */
	fadd	f0, f2, f0
	
/* If there was a fraction, use the round up version */
	fsel	f1, f1, f2, f0

/* Convert to integer again */
	fctiw	f1, f1

/* Store at sp-16 (Temp) */
	stfiwx	f1, 0, r4

/* Load the value (Sign extend) */
	lwa		r3, -8(r1)
	blr

#endif


/***************************************

	Intel 32 bit version

	eax, ecx and edx are volatile
	Result in eax
	fInput = 4(%esp)

***************************************/

#if defined(__i386__)
	.align	4,0x90
	.globl __ZN6Burger17float_to_int_ceilEf
__ZN6Burger17float_to_int_ceilEf:

/* Load in an SSE register */
	movss		4(%esp), %xmm1

/* Convert to integer with round to zero */
	cvttps2dq	%xmm1, %xmm2
	
/* Convert back to float */
	cvtdq2ps	%xmm2, %xmm0

/* Should it round up? */
	cmpnless	%xmm0, %xmm1
	
/* Subtract either 0 or -1 */
	psubd		%xmm1, %xmm2
	
/* Move to integer register */
	movd		%xmm2, %eax
	ret

#endif

/***************************************

	Intel 64 bit version

	eax, ecx and edx are volatile
	Result in eax
	fInput = xmm0

***************************************/

#if defined(__x86_64__)
	.align	4,0x90
	.globl __ZN6Burger17float_to_int_ceilEf
__ZN6Burger17float_to_int_ceilEf:

/* Convert to integer with round to zero */
	cvttps2dq	%xmm0, %xmm2

/* Convert back to float */
	cvtdq2ps	%xmm2, %xmm1

/* Should it round up? */
	cmpnless	%xmm1, %xmm0

/* Subtract either 0 or -1 */
	psubd		%xmm0, %xmm2

/* Move to integer register */
	movd		%xmm2, %eax
	ret

#endif

