#
# X64 assembly for the Clang and GNU tool chain
#
# Copyright 1995-2023 by Rebecca Ann Heineman becky@burgerbecky.com
#
# Build with as
#
# uint64_t _xgetbv(uint_t xcr) BURGER_NOEXCEPT;
# rax, rcx, rdx, r8-11 are volatile
# xcr = rdi
# Result in rax
#

	.align 8
	.text
	.globl _xgetbv
	.type	_xgetbv, @function

_xgetbv:
	.cfi_startproc

# Does not use a stack frame
#	.cfi_def_cfa_offset 16

# register for xgetbv
	movq	%rdi, %rcx

# xgetbv instruction is the sequence below
	.byte	0x0F, 0x01, 0xD0
#	xgetbv

# Answer is in edx:eax, move to rax for uint64_t
	shl		$0x20, %rdx
	or		%rdx, %rax

	ret

	.size	_xgetbv, .-_xgetbv
	.cfi_endproc
