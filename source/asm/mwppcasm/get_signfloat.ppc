;
; PowerPC32 assembly for Metrowerks tool chain
;
; Copyright 1995-2023 by Rebecca Ann Heineman becky@burgerbecky.com
;
; Build with Metrowerks Codewarrior 10 for MacOSX Carbon
;
; float Burger::get_sign(float fInput) BURGER_NOEXCEPT
; r0, r3-12, fp0-fp13 are volatile
; fInput = fp1
; Result in fp1
;

	IMPORT g_fHalf__6Burger

	EXPORT get_sign__6BurgerFf[DS]
	EXPORT .get_sign__6BurgerFf[PR]

	TOC
	tc		get_sign__6BurgerFf[TC], get_sign__6BurgerFf[DS]
	tc		g_fHalf__6Burger[TC],g_fHalf__6Burger

	CSECT	get_sign__6BurgerFf[DS]
	dc.l	.get_sign__6BurgerFf[PR]
	dc.l	TOC[tc0]

	CSECT	.get_sign__6BurgerFf[PR]

; Test for NaN first, to avoid stalls later
	fcmpu	cr1, fp1, fp1

; Get 0.5
	lwz		r3, g_fHalf__6Burger[TC](RTOC)

; -fInput
	fneg	fp2, fp1
	lfs		fp3, 0(r3)

; -0.5
	fneg	fp4, fp3

; Test twice, to also find 0.0f
	fsel	fp0, fp1, fp3, fp4
	fsel	fp4, fp2, fp4, fp3

; Yields 0.0f, 1.0f, or -1.0f
	fadds	fp1, fp4, fp0

; If not NaN, return now
	beqlr	cr1

; NaN detected, you are boned
; Store the -NaN
	stfs	fp2, -8(sp)

; Assume result is 1.0f (0.5*2)
	fadds	fp1, fp3, fp3

; Test for negative with integer registers
	lwz		r3, -8(sp)
	andis.	r3, r3, 0x8000

; Note: Testing on -NaN so not equal is positive
	bnelr

; Return negative
	fneg	fp1, fp1
	blr
	END
