;
; PowerPC32 assembly for Metrowerks tool chain
;
; Copyright 1995-2025 by Rebecca Ann Heineman becky@burgerbecky.com
;
; Build with Metrowerks Codewarrior 10 for MacOSX Carbon
;
; uint64_t Burger::power_of_two(uint64_t uInput) BURGER_NOEXCEPT
; r0, r3-12, fp0-fp13 are volatile
; uInput = r3/r4
; Result in r3/r4
;

	EXPORT power_of_two__6BurgerFUx[DS]
	EXPORT power_of_two__6BurgerFUx[PR]

	TOC
	tc		power_of_two__6BurgerFUx[TC], power_of_two__6BurgerFUx[DS]

	CSECT	power_of_two__6BurgerFUx[DS]
	dc.l	.power_of_two__6BurgerFUx[PR]
	dc.l	TOC[tc0]

	CSECT	.power_of_two__6BurgerFUx[PR]

; Start by subtracting 1 from the 64 bit input
	li		r5,-1
	addc	r4,r4,r5
	adde	r3,r3,r5

; Get the bit count from the upper 32 bits
; Branch if the upper 32 bits are zero
	cmpwi	r3,0
	cntlzw	r3,r3
	beq		low32

; r3 has 0 to 32, subtract from 32 to reverse the number
	subfic	r5,r3,32

; Prepare the result
	li		r3,1

; Low 32 bits are always zero
	li		r4,0

; Set the power of 2 bit, allow overflow
	slw		r3,r3,r5
	blr

; Input value resolves to low 32 bits
; Answer is 0x1 to 0x100000000
; Branch if the highest bit is already set
low32:
	cntlzw.	r4,r4
	beq		lowmax

; r4 has 0 to 32, subtract from 32 to reverse the number
	subfic	r3,r4,32

; Prepare the result
	li		r4,1

; Set the power of 2 bit, allow overflow
	slw		r4,r4,r3

; High word is always zero
	li		r3,0
	blr

; Save the result of 0x100000000
lowmax:
	li		r3,1
	blr

	END
