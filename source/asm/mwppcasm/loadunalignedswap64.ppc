;
; Load and swap a 64 bit integer with unaligned operations
;
; Done in assembly, because that's how you know it's done right
; PowerPC PEF version
;

	INCLUDE 'macros.ppc'

;
; Unmangled function prototype
; uint64_t BURGER_API Burger::_load_unaligned_swap(const uint64_t* pInput)
;

	EXPORT _load_unaligned_swap__6BurgerFPCUx[DS]
	EXPORT _load_unaligned_swap__6BurgerFPCUx[PR]

	DeclareProc _load_unaligned_swap__6BurgerFPCUx

; Load the lower 32 bits
	lbz		r4,0(r3)
	lbz		r5,1(r3)
	lbz		r6,2(r3)
	lbz		r7,3(r3)

; r4 has x,x,2,3
	rlwimi	r4,r5,8,16,23
; r6 has x,x,0,1
	rlwimi	r6,r7,8,16,23
; r4 has 0,1,2,3
	rlwimi	r4,r6,16,0,15

; Load the upper 32 bits
	lbz		r5,5(r3)
	lbz		r6,6(r3)
	lbz		r7,7(r3)
	lbz		r3,4(r3)

; r6 has x,x,0,1
	rlwimi	r6,r7,8,16,23
; r3 has x,x,2,3
	rlwimi	r3,r5,8,16,23
; r3 has 0,1,2,3
	rlwimi	r3,r6,16,0,15

; Return the value in r3,r4
	blr

	END
