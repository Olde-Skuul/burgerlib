#
# Build burger with WMAKE
# Generated with makeprojects.watcom
#
# Require the environment variable WATCOM set to the OpenWatcom folder
# Example: WATCOM=C:\WATCOM
#

# This speeds up the building process for Watcom because it
# keeps the apps in memory and doesn't have to reload for every source file
# Note: There is a bug that if the wlib app is loaded, it will not
# get the proper WOW file if a full build is performed

# The bug is gone from Watcom 1.2

!ifdef %WATCOM
!ifdef __LOADDLL__
!loaddll wcc $(%WATCOM)/binnt/wccd
!loaddll wccaxp $(%WATCOM)/binnt/wccdaxp
!loaddll wcc386 $(%WATCOM)/binnt/wccd386
!loaddll wpp $(%WATCOM)/binnt/wppdi86
!loaddll wppaxp $(%WATCOM)/binnt/wppdaxp
!loaddll wpp386 $(%WATCOM)/binnt/wppd386
!loaddll wlink $(%WATCOM)/binnt/wlinkd
!loaddll wlib $(%WATCOM)/binnt/wlibd
!endif
!endif

#
# List the names of all of the final binaries to build and clean
#

all: Debug Internal Release .SYMBOLIC
	@%null

clean: clean_Debug clean_Internal clean_Release .SYMBOLIC
	@%null

#
# Configurations
#

Debug: Debugw32 .SYMBOLIC
	@%null

clean_Debug: clean_Debugw32 .SYMBOLIC
	@%null

Internal: Internalw32 .SYMBOLIC
	@%null

clean_Internal: clean_Internalw32 .SYMBOLIC
	@%null

Release: Releasew32 .SYMBOLIC
	@%null

clean_Release: clean_Releasew32 .SYMBOLIC
	@%null

#
# Platforms
#

w32: Debugw32 Internalw32 Releasew32 .SYMBOLIC
	@%null

clean_w32: clean_Debugw32 clean_Internalw32 clean_Releasew32 .SYMBOLIC
	@%null

#
# List of binaries to build or clean
#

Debugw32: .SYMBOLIC
	@if not exist bin @mkdir bin
	@if not exist "temp\burgerwatw32dbg" @mkdir "temp\burgerwatw32dbg"
	@set CONFIG=Debug
	@set TARGET=w32
	@%make bin\burgerwatw32dbg.lib

clean_Debugw32: .SYMBOLIC
	@if exist temp\burgerwatw32dbg @rmdir /s /q temp\burgerwatw32dbg
	@if exist bin\burgerwatw32dbg.lib @del /q bin\burgerwatw32dbg.lib
	@-if exist bin @rmdir bin 2>NUL
	@-if exist temp @rmdir temp 2>NUL

Internalw32: .SYMBOLIC
	@if not exist bin @mkdir bin
	@if not exist "temp\burgerwatw32int" @mkdir "temp\burgerwatw32int"
	@set CONFIG=Internal
	@set TARGET=w32
	@%make bin\burgerwatw32int.lib

clean_Internalw32: .SYMBOLIC
	@if exist temp\burgerwatw32int @rmdir /s /q temp\burgerwatw32int
	@if exist bin\burgerwatw32int.lib @del /q bin\burgerwatw32int.lib
	@-if exist bin @rmdir bin 2>NUL
	@-if exist temp @rmdir temp 2>NUL

Releasew32: .SYMBOLIC
	@if not exist bin @mkdir bin
	@if not exist "temp\burgerwatw32rel" @mkdir "temp\burgerwatw32rel"
	@set CONFIG=Release
	@set TARGET=w32
	@%make bin\burgerwatw32rel.lib

clean_Releasew32: .SYMBOLIC
	@if exist temp\burgerwatw32rel @rmdir /s /q temp\burgerwatw32rel
	@if exist bin\burgerwatw32rel.lib @del /q bin\burgerwatw32rel.lib
	@-if exist bin @rmdir bin 2>NUL
	@-if exist temp @rmdir temp 2>NUL

#
# Create the folder for the binary output
#

bin:
	@if not exist bin @mkdir bin

temp:
	@if not exist temp @mkdir temp

#
# Disable building this make file
#

burgerwatw32.wmk:
	@%null

#
# Required environment variables
#

!ifndef %DXSDK_DIR
!error the environment variable DXSDK_DIR was not declared
!endif

!ifndef %WATCOM
!error the environment variable WATCOM was not declared
!endif

#
# Default configuration
#

!ifndef CONFIG
CONFIG = Release
!endif

#
# Default target
#

!ifndef TARGET
TARGET = w32
!endif

#
# Directory name fragments
#

TARGET_SUFFIX_w32 = w32

CONFIG_SUFFIX_Debug = dbg
CONFIG_SUFFIX_Internal = int
CONFIG_SUFFIX_Release = rel

#
# Base name of the temp directory
#

BASE_TEMP_DIR = temp\burger
BASE_SUFFIX = wat$(TARGET_SUFFIX_$(%TARGET))$(CONFIG_SUFFIX_$(%CONFIG))
TEMP_DIR = temp\burger$(BASE_SUFFIX)

#
# Set the set of known files supported
# Note: They are in the reverse order of building. .c is built first, then .x86
# until the .exe or .lib files are built
#

.extensions:
.extensions: .exe .exp .lib .obj .h .cpp .x86 .c .i86

#
# SOURCE_DIRS = Work directories for the source code
#

SOURCE_DIRS =../source
SOURCE_DIRS +=;../source/ansi
SOURCE_DIRS +=;../source/audio
SOURCE_DIRS +=;../source/commandline
SOURCE_DIRS +=;../source/compression
SOURCE_DIRS +=;../source/file
SOURCE_DIRS +=;../source/flashplayer
SOURCE_DIRS +=;../source/generated
SOURCE_DIRS +=;../source/graphics
SOURCE_DIRS +=;../source/graphics/effects
SOURCE_DIRS +=;../source/graphics/shaders
SOURCE_DIRS +=;../source/graphics/shadersdx9/generated
SOURCE_DIRS +=;../source/graphics/shadersopengl/generated
SOURCE_DIRS +=;../source/graphics/vulkan
SOURCE_DIRS +=;../source/input
SOURCE_DIRS +=;../source/lowlevel
SOURCE_DIRS +=;../source/math
SOURCE_DIRS +=;../source/memory
SOURCE_DIRS +=;../source/platforms/windows
SOURCE_DIRS +=;../source/platforms/windows/generated
SOURCE_DIRS +=;../source/random
SOURCE_DIRS +=;../source/text

#
# INCLUDE_DIRS = Header includes
#

INCLUDE_DIRS = $(SOURCE_DIRS)
INCLUDE_DIRS +=;../sdks/windows/dplay/include
INCLUDE_DIRS +=;../sdks/windows/ddraw/include
INCLUDE_DIRS +=;$(%DXSDK_DIR)/Include
INCLUDE_DIRS +=;../sdks/windows/opengl
INCLUDE_DIRS +=;../sdks/steamworks/public/steam

#
# Tell WMAKE where to find the files to work with
#

.c: $(SOURCE_DIRS)
.cpp: $(SOURCE_DIRS)
.x86: $(SOURCE_DIRS)
.i86: $(SOURCE_DIRS)

#
# Set the compiler flags for each of the build types
#

CFlagsDebugw32= -bm -bt=NT -dTYPE_BOOL=1 -dTARGET_CPU_X86=1 -dTARGET_OS_WIN32=1 -i="$(%WATCOM)/h;$(%WATCOM)/h/nt" -d2 -od -D_DEBUG -D_WINDOWS -DWIN32_LEAN_AND_MEAN -DWIN32 -DWINVER=0x0600 -D_WIN32_WINNT=0x0600 -DNTDDI_VERSION=0x05010000 -DD3D11_NO_HELPERS -DGLUT_DISABLE_ATEXIT_HACK
CFlagsInternalw32= -bm -bt=NT -dTYPE_BOOL=1 -dTARGET_CPU_X86=1 -dTARGET_OS_WIN32=1 -i="$(%WATCOM)/h;$(%WATCOM)/h/nt" -d2 -oaxsh -D_DEBUG -D_WINDOWS -DWIN32_LEAN_AND_MEAN -DWIN32 -DWINVER=0x0600 -D_WIN32_WINNT=0x0600 -DNTDDI_VERSION=0x05010000 -DD3D11_NO_HELPERS -DGLUT_DISABLE_ATEXIT_HACK
CFlagsReleasew32= -bm -bt=NT -dTYPE_BOOL=1 -dTARGET_CPU_X86=1 -dTARGET_OS_WIN32=1 -i="$(%WATCOM)/h;$(%WATCOM)/h/nt" -d0 -oaxsh -DNDEBUG -D_WINDOWS -DWIN32_LEAN_AND_MEAN -DWIN32 -DWINVER=0x0600 -D_WIN32_WINNT=0x0600 -DNTDDI_VERSION=0x05010000 -DD3D11_NO_HELPERS -DGLUT_DISABLE_ATEXIT_HACK

#
# Set the assembler flags for each of the build types
#

AFlagsDebugw32= -d__WIN32__=1 -D_DEBUG -D_WINDOWS -DWIN32_LEAN_AND_MEAN -DWIN32 -DWINVER=0x0600 -D_WIN32_WINNT=0x0600 -DNTDDI_VERSION=0x05010000 -DD3D11_NO_HELPERS -DGLUT_DISABLE_ATEXIT_HACK
AFlagsInternalw32= -d__WIN32__=1 -D_DEBUG -D_WINDOWS -DWIN32_LEAN_AND_MEAN -DWIN32 -DWINVER=0x0600 -D_WIN32_WINNT=0x0600 -DNTDDI_VERSION=0x05010000 -DD3D11_NO_HELPERS -DGLUT_DISABLE_ATEXIT_HACK
AFlagsReleasew32= -d__WIN32__=1 -DNDEBUG -D_WINDOWS -DWIN32_LEAN_AND_MEAN -DWIN32 -DWINVER=0x0600 -D_WIN32_WINNT=0x0600 -DNTDDI_VERSION=0x05010000 -DD3D11_NO_HELPERS -DGLUT_DISABLE_ATEXIT_HACK

#
# Set the Linker flags for each of the build types
#

LFlagsDebugw32= system nt
LFlagsInternalw32= system nt
LFlagsReleasew32= system nt

# Now, set the compiler flags

CL=WCC386 -6r -fp6 -w4 -ei -j -mf -zq -zp=8 -wcd=7 -i="$(INCLUDE_DIRS)"
CP=WPP386 -6r -fp6 -w4 -ei -j -mf -zq -zp=8 -wcd=7 -i="$(INCLUDE_DIRS)"
ASM=WASM -5r -fp6 -w4 -zq -d__WATCOM__=1
LINK=*WLINK option caseexact option quiet PATH $(%WATCOM)/binnt;$(%WATCOM)/binw;.

# Set the default build rules
# Requires ASM, CP to be set

# Macro expansion is on page 93 of the C/C++ Tools User's Guide
# $^* = C:\dir\target (No extension)
# $[* = C:\dir\dep (No extension)
# $^@ = C:\dir\target.ext
# $^: = C:\dir\

.i86.obj : .AUTODEPEND
	@echo $[&.i86 / $(%CONFIG) / $(%TARGET)
	@$(ASM) -0 -w4 -zq -d__WATCOM__=1 $(AFlags$(%CONFIG)$(%TARGET)) $[*.i86 -fo=$^@ -fr=$^*.err

.x86.obj : .AUTODEPEND
	@echo $[&.x86 / $(%CONFIG) / $(%TARGET)
	@$(ASM) $(AFlags$(%CONFIG)$(%TARGET)) $[*.x86 -fo=$^@ -fr=$^*.err

.c.obj : .AUTODEPEND
	@echo $[&.c / $(%CONFIG) / $(%TARGET)
	@$(CL) $(CFlags$(%CONFIG)$(%TARGET)) $[*.c -fo=$^@ -fr=$^*.err

.cpp.obj : .AUTODEPEND
	@echo $[&.cpp / $(%CONFIG) / $(%TARGET)
	@$(CP) $(CFlags$(%CONFIG)$(%TARGET)) $[*.cpp -fo=$^@ -fr=$^*.err

#
# Object files to work with for the library
#

OBJS= $(A)/bradler16.obj &
	$(A)/bradler32.obj &
	$(A)/bralaw.obj &
	$(A)/bralgorithm.obj &
	$(A)/brargumenttype.obj &
	$(A)/brarray.obj &
	$(A)/brasciito.obj &
	$(A)/brassert.obj &
	$(A)/bratomic.obj &
	$(A)/brautorepeat.obj &
	$(A)/brbase.obj &
	$(A)/brcapturestdout.obj &
	$(A)/brcodelibrary.obj &
	$(A)/brcodelibrarywindows.obj &
	$(A)/brcodepage.obj &
	$(A)/brcommandparameter.obj &
	$(A)/brcommandparameterbooltrue.obj &
	$(A)/brcommandparameterstring.obj &
	$(A)/brcommandparameterwordptr.obj &
	$(A)/brcompress.obj &
	$(A)/brcompressdeflate.obj &
	$(A)/brcompresslbmrle.obj &
	$(A)/brcompresslzss.obj &
	$(A)/brconsolemanager.obj &
	$(A)/brconsolemanagerwindows.obj &
	$(A)/brcrc16.obj &
	$(A)/brcrc32.obj &
	$(A)/brcriticalsection.obj &
	$(A)/brcriticalsectionwindows.obj &
	$(A)/brdebug.obj &
	$(A)/brdebugwindows.obj &
	$(A)/brdecompress.obj &
	$(A)/brdecompressdeflate.obj &
	$(A)/brdecompresslbmrle.obj &
	$(A)/brdecompresslzss.obj &
	$(A)/brdetectmultilaunch.obj &
	$(A)/brdetectmultilaunchwindows.obj &
	$(A)/brdirectorysearch.obj &
	$(A)/brdirectorysearchwindows.obj &
	$(A)/brdisplay.obj &
	$(A)/brdisplaybasewindows.obj &
	$(A)/brdisplaydibsoftware8windows.obj &
	$(A)/brdisplaydibwindows.obj &
	$(A)/brdisplaydirectx11windows.obj &
	$(A)/brdisplaydirectx9software8windows.obj &
	$(A)/brdisplaydirectx9windows.obj &
	$(A)/brdisplayobject.obj &
	$(A)/brdisplayopengl.obj &
	$(A)/brdisplayopenglsoftware8.obj &
	$(A)/brdisplayopenglwindows.obj &
	$(A)/brdjb2hash.obj &
	$(A)/brdoublylinkedlist.obj &
	$(A)/brdxt1.obj &
	$(A)/brdxt3.obj &
	$(A)/brdxt5.obj &
	$(A)/brearcliptriangulate.obj &
	$(A)/breffect.obj &
	$(A)/breffect2d.obj &
	$(A)/breffectpositiontexturecolor.obj &
	$(A)/breffectstaticpositiontexture.obj &
	$(A)/brendian.obj &
	$(A)/brerror.obj &
	$(A)/brfile.obj &
	$(A)/brfileansihelpers.obj &
	$(A)/brfileapf.obj &
	$(A)/brfilebmp.obj &
	$(A)/brfiledds.obj &
	$(A)/brfilegif.obj &
	$(A)/brfileini.obj &
	$(A)/brfilelbm.obj &
	$(A)/brfilemanager.obj &
	$(A)/brfilemanagerwindows.obj &
	$(A)/brfilemp3.obj &
	$(A)/brfilename.obj &
	$(A)/brfilenamewindows.obj &
	$(A)/brfilepcx.obj &
	$(A)/brfilepng.obj &
	$(A)/brfiletga.obj &
	$(A)/brfilewindows.obj &
	$(A)/brfilexml.obj &
	$(A)/brfixedmatrix3d.obj &
	$(A)/brfixedmatrix4d.obj &
	$(A)/brfixedpoint.obj &
	$(A)/brfixedvector2d.obj &
	$(A)/brfixedvector3d.obj &
	$(A)/brfixedvector4d.obj &
	$(A)/brflashaction.obj &
	$(A)/brflashactionvalue.obj &
	$(A)/brflashavm2.obj &
	$(A)/brflashcolortransform.obj &
	$(A)/brflashdisasmactionscript.obj &
	$(A)/brflashmanager.obj &
	$(A)/brflashmatrix23.obj &
	$(A)/brflashrect.obj &
	$(A)/brflashrgba.obj &
	$(A)/brflashstream.obj &
	$(A)/brflashutils.obj &
	$(A)/brfloatingpoint.obj &
	$(A)/brfont.obj &
	$(A)/brfont4bit.obj &
	$(A)/brfphalf.obj &
	$(A)/brfpinfo.obj &
	$(A)/brfplargeint.obj &
	$(A)/brfpprintinfo.obj &
	$(A)/brgameapp.obj &
	$(A)/brglobalmemorymanager.obj &
	$(A)/brglobals.obj &
	$(A)/brglobalsshimswindows.obj &
	$(A)/brglobalswindows.obj &
	$(A)/brgost.obj &
	$(A)/brgridindex.obj &
	$(A)/brguid.obj &
	$(A)/brguidwindows.obj &
	$(A)/brhashmap.obj &
	$(A)/brimage.obj &
	$(A)/brimportit.obj &
	$(A)/brimports3m.obj &
	$(A)/brimportxm.obj &
	$(A)/brinputmemorystream.obj &
	$(A)/brintrinsics.obj &
	$(A)/brisolatin1.obj &
	$(A)/brjoypad.obj &
	$(A)/brjoypadwindows.obj &
	$(A)/brkeyboard.obj &
	$(A)/brkeyboardwindows.obj &
	$(A)/brlastinfirstout.obj &
	$(A)/brlinkedlistobject.obj &
	$(A)/brlinkedlistpointer.obj &
	$(A)/brlocalization.obj &
	$(A)/brmace.obj &
	$(A)/brmacromanus.obj &
	$(A)/brmatrix3d.obj &
	$(A)/brmatrix4d.obj &
	$(A)/brmd2.obj &
	$(A)/brmd4.obj &
	$(A)/brmd5.obj &
	$(A)/brmemoryansi.obj &
	$(A)/brmemoryfunctions.obj &
	$(A)/brmemoryhandle.obj &
	$(A)/brmemorymanager.obj &
	$(A)/brmemorymanagerwindows.obj &
	$(A)/brmersennetwist.obj &
	$(A)/brmicrosoftadpcm.obj &
	$(A)/brmouse.obj &
	$(A)/brmousewindows.obj &
	$(A)/brnumberstring.obj &
	$(A)/brnumberstringhex.obj &
	$(A)/brnumberto.obj &
	$(A)/broscursor.obj &
	$(A)/broscursorwindows.obj &
	$(A)/brosstringfunctions.obj &
	$(A)/brosstringfunctionswindows.obj &
	$(A)/broutputmemorystream.obj &
	$(A)/brpackfloat.obj &
	$(A)/brpair.obj &
	$(A)/brpalette.obj &
	$(A)/brperforce.obj &
	$(A)/brperforcewindows.obj &
	$(A)/brpoint2d.obj &
	$(A)/brpoint2dwindows.obj &
	$(A)/brprintf.obj &
	$(A)/brqueue.obj &
	$(A)/brrandom.obj &
	$(A)/brrandombase.obj &
	$(A)/brrect.obj &
	$(A)/brrectwindows.obj &
	$(A)/brrenderer.obj &
	$(A)/brrenderersoftware16.obj &
	$(A)/brrenderersoftware8.obj &
	$(A)/brrezfile.obj &
	$(A)/brrunqueue.obj &
	$(A)/brsdbmhash.obj &
	$(A)/brsequencer.obj &
	$(A)/brsequencerwindows.obj &
	$(A)/brsha1.obj &
	$(A)/brshader2dccolor.obj &
	$(A)/brshader2dcolorvertex.obj &
	$(A)/brshaders.obj &
	$(A)/brshape8bit.obj &
	$(A)/brsimplearray.obj &
	$(A)/brsimplestring.obj &
	$(A)/brsinecosine.obj &
	$(A)/brsmartpointer.obj &
	$(A)/brsound.obj &
	$(A)/brsoundbufferrez.obj &
	$(A)/brsounddecompress.obj &
	$(A)/brsoundwindows.obj &
	$(A)/brstaticrtti.obj &
	$(A)/brstdouthelpers.obj &
	$(A)/brstdouthelperswindows.obj &
	$(A)/brstring.obj &
	$(A)/brstring16.obj &
	$(A)/brstringfunctions.obj &
	$(A)/brstructs.obj &
	$(A)/brtemplates.obj &
	$(A)/brtexture.obj &
	$(A)/brtexturedirectx9.obj &
	$(A)/brtextureopengl.obj &
	$(A)/brthread.obj &
	$(A)/brthreadwindows.obj &
	$(A)/brtick.obj &
	$(A)/brtickwindows.obj &
	$(A)/brtimedate.obj &
	$(A)/brtimedatewindows.obj &
	$(A)/brtypes.obj &
	$(A)/brulaw.obj &
	$(A)/brunpackbytes.obj &
	$(A)/brutf16.obj &
	$(A)/brutf32.obj &
	$(A)/brutf8.obj &
	$(A)/brvector2d.obj &
	$(A)/brvector3d.obj &
	$(A)/brvector4d.obj &
	$(A)/brvertexbuffer.obj &
	$(A)/brvertexbufferdirextx9.obj &
	$(A)/brvertexbufferopengl.obj &
	$(A)/brvulkanerrors.obj &
	$(A)/brwin1252.obj &
	$(A)/brwin437.obj &
	$(A)/brwindowsapp.obj &
	$(A)/win_d3d11.obj &
	$(A)/win_d3d9.obj &
	$(A)/win_ddraw.obj &
	$(A)/win_dinput.obj &
	$(A)/win_directxdata.obj &
	$(A)/win_dplay.obj &
	$(A)/win_dsound.obj &
	$(A)/win_error.obj &
	$(A)/win_globals.obj &
	$(A)/win_hid.obj &
	$(A)/win_kernel32.obj &
	$(A)/win_launcher.obj &
	$(A)/win_loadlibrary.obj &
	$(A)/win_memorymanager.obj &
	$(A)/win_platformshims.obj &
	$(A)/win_registry.obj &
	$(A)/win_rpcrt4.obj &
	$(A)/win_setupapi.obj &
	$(A)/win_shell32.obj &
	$(A)/win_shlwapi.obj &
	$(A)/win_user32.obj &
	$(A)/win_version.obj &
	$(A)/win_winmm.obj &
	$(A)/win_winutils.obj &
	$(A)/win_xinput.obj

#
# A = The object file temp folder
#

A = $(BASE_TEMP_DIR)watw32dbg
bin\burgerwatw32dbg.lib: $+$(OBJS)$- burgerwatw32.wmk
	@SET WOW=$+$(OBJS)$-
	@WLIB -q -b -c -n $^@ @WOW

A = $(BASE_TEMP_DIR)watw32int
bin\burgerwatw32int.lib: $+$(OBJS)$- burgerwatw32.wmk
	@SET WOW=$+$(OBJS)$-
	@WLIB -q -b -c -n $^@ @WOW

A = $(BASE_TEMP_DIR)watw32rel
bin\burgerwatw32rel.lib: $+$(OBJS)$- burgerwatw32.wmk
	@SET WOW=$+$(OBJS)$-
	@WLIB -q -b -c -n $^@ @WOW
