#
# Build burger with WMAKE
# Generated with makeprojects.watcom
#
# Require the environment variable WATCOM set to the OpenWatcom folder
# Example: WATCOM=C:\WATCOM
#

# This speeds up the building process for Watcom because it
# keeps the apps in memory and doesn't have to reload for every source file
# Note: There is a bug that if the wlib app is loaded, it will not
# get the proper WOW file if a full build is performed

# The bug is gone from Watcom 1.2

!ifdef %WATCOM
!ifdef __LOADDLL__
!loaddll wcc $(%WATCOM)/binnt/wccd
!loaddll wccaxp $(%WATCOM)/binnt/wccdaxp
!loaddll wcc386 $(%WATCOM)/binnt/wccd386
!loaddll wpp $(%WATCOM)/binnt/wppdi86
!loaddll wppaxp $(%WATCOM)/binnt/wppdaxp
!loaddll wpp386 $(%WATCOM)/binnt/wppd386
!loaddll wlink $(%WATCOM)/binnt/wlinkd
!loaddll wlib $(%WATCOM)/binnt/wlibd
!endif
!endif

#
# List the names of all of the final binaries to build and clean
#

all: Debug Internal Release .SYMBOLIC
	@%null

clean: clean_Debug clean_Internal clean_Release .SYMBOLIC
	@%null

#
# Configurations
#

Debug: Debugdos4gw Debugdosx32 .SYMBOLIC
	@%null

clean_Debug: clean_Debugdos4gw clean_Debugdosx32 .SYMBOLIC
	@%null

Internal: Internaldos4gw Internaldosx32 .SYMBOLIC
	@%null

clean_Internal: clean_Internaldos4gw clean_Internaldosx32 .SYMBOLIC
	@%null

Release: Releasedos4gw Releasedosx32 .SYMBOLIC
	@%null

clean_Release: clean_Releasedos4gw clean_Releasedosx32 .SYMBOLIC
	@%null

#
# Platforms
#

dos4gw: Debugdos4gw Debugdos4gw Internaldos4gw Internaldos4gw Releasedos4gw Releasedos4gw .SYMBOLIC
	@%null

clean_dos4gw: clean_Debugdos4gw clean_Debugdos4gw clean_Internaldos4gw clean_Internaldos4gw clean_Releasedos4gw clean_Releasedos4gw .SYMBOLIC
	@%null

dosx32: Debugdosx32 Debugdosx32 Internaldosx32 Internaldosx32 Releasedosx32 Releasedosx32 .SYMBOLIC
	@%null

clean_dosx32: clean_Debugdosx32 clean_Debugdosx32 clean_Internaldosx32 clean_Internaldosx32 clean_Releasedosx32 clean_Releasedosx32 .SYMBOLIC
	@%null

#
# List of binaries to build or clean
#

Debugdos4gw: .SYMBOLIC
	@if not exist bin @mkdir bin
	@if not exist "temp\burgerwat4gwdbg" @mkdir "temp\burgerwat4gwdbg"
	@set CONFIG=Debug
	@set TARGET=dos4gw
	@%make bin\burgerwat4gwdbg.lib

clean_Debugdos4gw: .SYMBOLIC
	@if exist temp\burgerwat4gwdbg @rmdir /s /q temp\burgerwat4gwdbg
	@if exist bin\burgerwat4gwdbg.lib @del /q bin\burgerwat4gwdbg.lib
	@-if exist bin @rmdir bin 2>NUL
	@-if exist temp @rmdir temp 2>NUL

Debugdosx32: .SYMBOLIC
	@if not exist bin @mkdir bin
	@if not exist "temp\burgerwatx32dbg" @mkdir "temp\burgerwatx32dbg"
	@set CONFIG=Debug
	@set TARGET=dosx32
	@%make bin\burgerwatx32dbg.lib

clean_Debugdosx32: .SYMBOLIC
	@if exist temp\burgerwatx32dbg @rmdir /s /q temp\burgerwatx32dbg
	@if exist bin\burgerwatx32dbg.lib @del /q bin\burgerwatx32dbg.lib
	@-if exist bin @rmdir bin 2>NUL
	@-if exist temp @rmdir temp 2>NUL

Internaldos4gw: .SYMBOLIC
	@if not exist bin @mkdir bin
	@if not exist "temp\burgerwat4gwint" @mkdir "temp\burgerwat4gwint"
	@set CONFIG=Internal
	@set TARGET=dos4gw
	@%make bin\burgerwat4gwint.lib

clean_Internaldos4gw: .SYMBOLIC
	@if exist temp\burgerwat4gwint @rmdir /s /q temp\burgerwat4gwint
	@if exist bin\burgerwat4gwint.lib @del /q bin\burgerwat4gwint.lib
	@-if exist bin @rmdir bin 2>NUL
	@-if exist temp @rmdir temp 2>NUL

Internaldosx32: .SYMBOLIC
	@if not exist bin @mkdir bin
	@if not exist "temp\burgerwatx32int" @mkdir "temp\burgerwatx32int"
	@set CONFIG=Internal
	@set TARGET=dosx32
	@%make bin\burgerwatx32int.lib

clean_Internaldosx32: .SYMBOLIC
	@if exist temp\burgerwatx32int @rmdir /s /q temp\burgerwatx32int
	@if exist bin\burgerwatx32int.lib @del /q bin\burgerwatx32int.lib
	@-if exist bin @rmdir bin 2>NUL
	@-if exist temp @rmdir temp 2>NUL

Releasedos4gw: .SYMBOLIC
	@if not exist bin @mkdir bin
	@if not exist "temp\burgerwat4gwrel" @mkdir "temp\burgerwat4gwrel"
	@set CONFIG=Release
	@set TARGET=dos4gw
	@%make bin\burgerwat4gwrel.lib

clean_Releasedos4gw: .SYMBOLIC
	@if exist temp\burgerwat4gwrel @rmdir /s /q temp\burgerwat4gwrel
	@if exist bin\burgerwat4gwrel.lib @del /q bin\burgerwat4gwrel.lib
	@-if exist bin @rmdir bin 2>NUL
	@-if exist temp @rmdir temp 2>NUL

Releasedosx32: .SYMBOLIC
	@if not exist bin @mkdir bin
	@if not exist "temp\burgerwatx32rel" @mkdir "temp\burgerwatx32rel"
	@set CONFIG=Release
	@set TARGET=dosx32
	@%make bin\burgerwatx32rel.lib

clean_Releasedosx32: .SYMBOLIC
	@if exist temp\burgerwatx32rel @rmdir /s /q temp\burgerwatx32rel
	@if exist bin\burgerwatx32rel.lib @del /q bin\burgerwatx32rel.lib
	@-if exist bin @rmdir bin 2>NUL
	@-if exist temp @rmdir temp 2>NUL

#
# Create the folder for the binary output
#

bin:
	@if not exist bin @mkdir bin

temp:
	@if not exist temp @mkdir temp

#
# Disable building this make file
#

burgerwatdos.wmk:
	@%null

#
# Required environment variables
#

!ifndef %WATCOM
!error the environment variable WATCOM was not declared
!endif

#
# Default configuration
#

!ifndef CONFIG
CONFIG = Release
!endif

#
# Default target
#

!ifndef TARGET
TARGET = dos4gw
!endif

#
# Directory name fragments
#

TARGET_SUFFIX_dos4gw = 4gw
TARGET_SUFFIX_dosx32 = x32

CONFIG_SUFFIX_Debug = dbg
CONFIG_SUFFIX_Internal = int
CONFIG_SUFFIX_Release = rel

#
# Base name of the temp directory
#

BASE_TEMP_DIR = temp\burger
BASE_SUFFIX = wat$(TARGET_SUFFIX_$(%TARGET))$(CONFIG_SUFFIX_$(%CONFIG))
TEMP_DIR = temp\burger$(BASE_SUFFIX)

#
# Set the set of known files supported
# Note: They are in the reverse order of building. .c is built first, then .x86
# until the .exe or .lib files are built
#

.extensions:
.extensions: .exe .exp .lib .obj .h .cpp .x86 .c .i86

#
# SOURCE_DIRS = Work directories for the source code
#

SOURCE_DIRS =../source
SOURCE_DIRS +=;../source/ansi
SOURCE_DIRS +=;../source/audio
SOURCE_DIRS +=;../source/commandline
SOURCE_DIRS +=;../source/compression
SOURCE_DIRS +=;../source/file
SOURCE_DIRS +=;../source/flashplayer
SOURCE_DIRS +=;../source/generated
SOURCE_DIRS +=;../source/graphics
SOURCE_DIRS +=;../source/graphics/effects
SOURCE_DIRS +=;../source/graphics/shaders
SOURCE_DIRS +=;../source/input
SOURCE_DIRS +=;../source/lowlevel
SOURCE_DIRS +=;../source/math
SOURCE_DIRS +=;../source/memory
SOURCE_DIRS +=;../source/platforms/msdos
SOURCE_DIRS +=;../source/random
SOURCE_DIRS +=;../source/text

#
# INCLUDE_DIRS = Header includes
#

INCLUDE_DIRS = $(SOURCE_DIRS)
INCLUDE_DIRS +=;../sdks/msdos/x32/include

#
# Tell WMAKE where to find the files to work with
#

.c: $(SOURCE_DIRS)
.cpp: $(SOURCE_DIRS)
.x86: $(SOURCE_DIRS)
.i86: $(SOURCE_DIRS)

#
# Set the compiler flags for each of the build types
#

CFlagsDebugdos4gw= -bt=DOS -i="$(%WATCOM)/h;$(%WATCOM)/h/nt" -d2 -od -D_DEBUG -D__DOS4G__
CFlagsDebugdosx32= -bt=DOS -i="$(%WATCOM)/h" -d2 -od -D_DEBUG -D__X32__
CFlagsInternaldos4gw= -bt=DOS -i="$(%WATCOM)/h;$(%WATCOM)/h/nt" -d2 -oaxsh -D_DEBUG -D__DOS4G__
CFlagsInternaldosx32= -bt=DOS -i="$(%WATCOM)/h" -d2 -oaxsh -D_DEBUG -D__X32__
CFlagsReleasedos4gw= -bt=DOS -i="$(%WATCOM)/h;$(%WATCOM)/h/nt" -d0 -oaxsh -DNDEBUG -D__DOS4G__
CFlagsReleasedosx32= -bt=DOS -i="$(%WATCOM)/h" -d0 -oaxsh -DNDEBUG -D__X32__

#
# Set the assembler flags for each of the build types
#

AFlagsDebugdos4gw= -D_DEBUG -D__DOS4G__
AFlagsDebugdosx32= -D_DEBUG -D__X32__
AFlagsInternaldos4gw= -D_DEBUG -D__DOS4G__
AFlagsInternaldosx32= -D_DEBUG -D__X32__
AFlagsReleasedos4gw= -DNDEBUG -D__DOS4G__
AFlagsReleasedosx32= -DNDEBUG -D__X32__

#
# Set the Linker flags for each of the build types
#

LFlagsDebugdos4gw= system dos4g
LFlagsDebugdosx32= system x32r
LFlagsInternaldos4gw= system dos4g
LFlagsInternaldosx32= system x32r
LFlagsReleasedos4gw= system dos4g
LFlagsReleasedosx32= system x32r

# Now, set the compiler flags

CL=WCC386 -6r -fp6 -w4 -ei -j -mf -zq -zp=8 -wcd=7 -i="$(INCLUDE_DIRS)"
CP=WPP386 -6r -fp6 -w4 -ei -j -mf -zq -zp=8 -wcd=7 -i="$(INCLUDE_DIRS)"
ASM=WASM -5r -fp6 -w4 -zq -d__WATCOM__=1
LINK=*WLINK option caseexact option quiet PATH $(%WATCOM)/binnt;$(%WATCOM)/binw;.

# Set the default build rules
# Requires ASM, CP to be set

# Macro expansion is on page 93 of the C/C++ Tools User's Guide
# $^* = C:\dir\target (No extension)
# $[* = C:\dir\dep (No extension)
# $^@ = C:\dir\target.ext
# $^: = C:\dir\

.i86.obj : .AUTODEPEND
	@echo $[&.i86 / $(%CONFIG) / $(%TARGET)
	@$(ASM) -0 -w4 -zq -d__WATCOM__=1 $(AFlags$(%CONFIG)$(%TARGET)) $[*.i86 -fo=$^@ -fr=$^*.err

.x86.obj : .AUTODEPEND
	@echo $[&.x86 / $(%CONFIG) / $(%TARGET)
	@$(ASM) $(AFlags$(%CONFIG)$(%TARGET)) $[*.x86 -fo=$^@ -fr=$^*.err

.c.obj : .AUTODEPEND
	@echo $[&.c / $(%CONFIG) / $(%TARGET)
	@$(CL) $(CFlags$(%CONFIG)$(%TARGET)) $[*.c -fo=$^@ -fr=$^*.err

.cpp.obj : .AUTODEPEND
	@echo $[&.cpp / $(%CONFIG) / $(%TARGET)
	@$(CP) $(CFlags$(%CONFIG)$(%TARGET)) $[*.cpp -fo=$^@ -fr=$^*.err

#
# Object files to work with for the library
#

OBJS= $(A)/bradler16.obj &
	$(A)/bradler32.obj &
	$(A)/bralaw.obj &
	$(A)/bralgorithm.obj &
	$(A)/brargumenttype.obj &
	$(A)/brarray.obj &
	$(A)/brasciito.obj &
	$(A)/brassert.obj &
	$(A)/bratomic.obj &
	$(A)/brautorepeat.obj &
	$(A)/brbase.obj &
	$(A)/brcapturestdout.obj &
	$(A)/brcodelibrary.obj &
	$(A)/brcodepage.obj &
	$(A)/brcommandparameter.obj &
	$(A)/brcommandparameterbooltrue.obj &
	$(A)/brcommandparameterstring.obj &
	$(A)/brcommandparameterwordptr.obj &
	$(A)/brcompress.obj &
	$(A)/brcompressdeflate.obj &
	$(A)/brcompresslbmrle.obj &
	$(A)/brcompresslzss.obj &
	$(A)/brconsolemanager.obj &
	$(A)/brcrc16.obj &
	$(A)/brcrc32.obj &
	$(A)/brcriticalsection.obj &
	$(A)/brdebug.obj &
	$(A)/brdecompress.obj &
	$(A)/brdecompressdeflate.obj &
	$(A)/brdecompresslbmrle.obj &
	$(A)/brdecompresslzss.obj &
	$(A)/brdetectmultilaunch.obj &
	$(A)/brdirectorysearch.obj &
	$(A)/brdirectorysearchmsdos.obj &
	$(A)/brdisplay.obj &
	$(A)/brdisplayobject.obj &
	$(A)/brdisplayopengl.obj &
	$(A)/brdisplayopenglsoftware8.obj &
	$(A)/brdjb2hash.obj &
	$(A)/brdosextender.obj &
	$(A)/brdosextenderasm.obj &
	$(A)/brdoublylinkedlist.obj &
	$(A)/brdxt1.obj &
	$(A)/brdxt3.obj &
	$(A)/brdxt5.obj &
	$(A)/brearcliptriangulate.obj &
	$(A)/breffect.obj &
	$(A)/breffect2d.obj &
	$(A)/breffectpositiontexturecolor.obj &
	$(A)/breffectstaticpositiontexture.obj &
	$(A)/brendian.obj &
	$(A)/brerror.obj &
	$(A)/brfile.obj &
	$(A)/brfileansihelpers.obj &
	$(A)/brfileapf.obj &
	$(A)/brfilebmp.obj &
	$(A)/brfiledds.obj &
	$(A)/brfilegif.obj &
	$(A)/brfileini.obj &
	$(A)/brfilelbm.obj &
	$(A)/brfilemanager.obj &
	$(A)/brfilemanagermsdos.obj &
	$(A)/brfilemp3.obj &
	$(A)/brfilemsdos.obj &
	$(A)/brfilename.obj &
	$(A)/brfilenamemsdos.obj &
	$(A)/brfilepcx.obj &
	$(A)/brfilepng.obj &
	$(A)/brfiletga.obj &
	$(A)/brfilexml.obj &
	$(A)/brfixedmatrix3d.obj &
	$(A)/brfixedmatrix4d.obj &
	$(A)/brfixedpoint.obj &
	$(A)/brfixedvector2d.obj &
	$(A)/brfixedvector3d.obj &
	$(A)/brfixedvector4d.obj &
	$(A)/brflashaction.obj &
	$(A)/brflashactionvalue.obj &
	$(A)/brflashavm2.obj &
	$(A)/brflashcolortransform.obj &
	$(A)/brflashdisasmactionscript.obj &
	$(A)/brflashmanager.obj &
	$(A)/brflashmatrix23.obj &
	$(A)/brflashrect.obj &
	$(A)/brflashrgba.obj &
	$(A)/brflashstream.obj &
	$(A)/brflashutils.obj &
	$(A)/brfloatingpoint.obj &
	$(A)/brfont.obj &
	$(A)/brfont4bit.obj &
	$(A)/brfphalf.obj &
	$(A)/brfpinfo.obj &
	$(A)/brfplargeint.obj &
	$(A)/brfpprintinfo.obj &
	$(A)/brgameapp.obj &
	$(A)/brglobalmemorymanager.obj &
	$(A)/brglobals.obj &
	$(A)/brglobalsmsdos.obj &
	$(A)/brgost.obj &
	$(A)/brgridindex.obj &
	$(A)/brguid.obj &
	$(A)/brhashmap.obj &
	$(A)/brimage.obj &
	$(A)/brimportit.obj &
	$(A)/brimports3m.obj &
	$(A)/brimportxm.obj &
	$(A)/brinputmemorystream.obj &
	$(A)/brintrinsics.obj &
	$(A)/brisolatin1.obj &
	$(A)/brjoypad.obj &
	$(A)/brkeyboard.obj &
	$(A)/brlastinfirstout.obj &
	$(A)/brlinkedlistobject.obj &
	$(A)/brlinkedlistpointer.obj &
	$(A)/brlocalization.obj &
	$(A)/brmace.obj &
	$(A)/brmacromanus.obj &
	$(A)/brmatrix3d.obj &
	$(A)/brmatrix4d.obj &
	$(A)/brmd2.obj &
	$(A)/brmd4.obj &
	$(A)/brmd5.obj &
	$(A)/brmemoryansi.obj &
	$(A)/brmemoryfunctions.obj &
	$(A)/brmemoryhandle.obj &
	$(A)/brmemorymanager.obj &
	$(A)/brmersennetwist.obj &
	$(A)/brmicrosoftadpcm.obj &
	$(A)/brmouse.obj &
	$(A)/brnumberstring.obj &
	$(A)/brnumberstringhex.obj &
	$(A)/brnumberto.obj &
	$(A)/broscursor.obj &
	$(A)/brosstringfunctions.obj &
	$(A)/broutputmemorystream.obj &
	$(A)/brpackfloat.obj &
	$(A)/brpair.obj &
	$(A)/brpalette.obj &
	$(A)/brperforce.obj &
	$(A)/brpoint2d.obj &
	$(A)/brprintf.obj &
	$(A)/brqueue.obj &
	$(A)/brrandom.obj &
	$(A)/brrandombase.obj &
	$(A)/brrect.obj &
	$(A)/brrenderer.obj &
	$(A)/brrenderersoftware16.obj &
	$(A)/brrenderersoftware8.obj &
	$(A)/brrezfile.obj &
	$(A)/brrunqueue.obj &
	$(A)/brsdbmhash.obj &
	$(A)/brsequencer.obj &
	$(A)/brsha1.obj &
	$(A)/brshader2dccolor.obj &
	$(A)/brshader2dcolorvertex.obj &
	$(A)/brshaders.obj &
	$(A)/brshape8bit.obj &
	$(A)/brsimplearray.obj &
	$(A)/brsimplestring.obj &
	$(A)/brsinecosine.obj &
	$(A)/brsmartpointer.obj &
	$(A)/brsound.obj &
	$(A)/brsoundbufferrez.obj &
	$(A)/brsounddecompress.obj &
	$(A)/brstaticrtti.obj &
	$(A)/brstdouthelpers.obj &
	$(A)/brstring.obj &
	$(A)/brstring16.obj &
	$(A)/brstringfunctions.obj &
	$(A)/brstructs.obj &
	$(A)/brtemplates.obj &
	$(A)/brtexture.obj &
	$(A)/brtextureopengl.obj &
	$(A)/brthread.obj &
	$(A)/brtick.obj &
	$(A)/brtickmsdos.obj &
	$(A)/brtimedate.obj &
	$(A)/brtimedatemsdos.obj &
	$(A)/brtypes.obj &
	$(A)/brulaw.obj &
	$(A)/brunpackbytes.obj &
	$(A)/brutf16.obj &
	$(A)/brutf32.obj &
	$(A)/brutf8.obj &
	$(A)/brvector2d.obj &
	$(A)/brvector3d.obj &
	$(A)/brvector4d.obj &
	$(A)/brvertexbuffer.obj &
	$(A)/brvertexbufferopengl.obj &
	$(A)/brwin1252.obj &
	$(A)/brwin437.obj

#
# A = The object file temp folder
#

A = $(BASE_TEMP_DIR)wat4gwdbg
bin\burgerwat4gwdbg.lib: $+$(OBJS)$- burgerwatdos.wmk
	@SET WOW=$+$(OBJS)$-
	@WLIB -q -b -c -n $^@ @WOW

A = $(BASE_TEMP_DIR)watx32dbg
bin\burgerwatx32dbg.lib: $+$(OBJS)$- burgerwatdos.wmk
	@SET WOW=$+$(OBJS)$-
	@WLIB -q -b -c -n $^@ @WOW

A = $(BASE_TEMP_DIR)wat4gwint
bin\burgerwat4gwint.lib: $+$(OBJS)$- burgerwatdos.wmk
	@SET WOW=$+$(OBJS)$-
	@WLIB -q -b -c -n $^@ @WOW

A = $(BASE_TEMP_DIR)watx32int
bin\burgerwatx32int.lib: $+$(OBJS)$- burgerwatdos.wmk
	@SET WOW=$+$(OBJS)$-
	@WLIB -q -b -c -n $^@ @WOW

A = $(BASE_TEMP_DIR)wat4gwrel
bin\burgerwat4gwrel.lib: $+$(OBJS)$- burgerwatdos.wmk
	@SET WOW=$+$(OBJS)$-
	@WLIB -q -b -c -n $^@ @WOW

A = $(BASE_TEMP_DIR)watx32rel
bin\burgerwatx32rel.lib: $+$(OBJS)$- burgerwatdos.wmk
	@SET WOW=$+$(OBJS)$-
	@WLIB -q -b -c -n $^@ @WOW
